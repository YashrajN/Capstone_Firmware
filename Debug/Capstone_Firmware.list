
Capstone_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039fc  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003bc0  08003bc0  00013bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bd8  08003bd8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003bd8  08003bd8  00013bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003be0  08003be0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003be0  08003be0  00013be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003be4  08003be4  00013be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003be8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  2000000c  08003bf4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08003bf4  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f0c1  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d64  00000000  00000000  0002f0fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc0  00000000  00000000  00030e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c18  00000000  00000000  00031b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021d56  00000000  00000000  00032740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f24f  00000000  00000000  00054496  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0f5c  00000000  00000000  000636e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00134641  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035ec  00000000  00000000  00134694  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003ba8 	.word	0x08003ba8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08003ba8 	.word	0x08003ba8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <HAL_UART_RxCpltCallback>:
	uint8_t cal;
}position_data;

volatile uint8_t position_data_recieve_buf[sizeof(position_data)];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a0e      	ldr	r2, [pc, #56]	; (8000544 <HAL_UART_RxCpltCallback+0x48>)
 800050a:	4293      	cmp	r3, r2
 800050c:	d115      	bne.n	800053a <HAL_UART_RxCpltCallback+0x3e>
		if(check == START_BYTE){
 800050e:	4b0e      	ldr	r3, [pc, #56]	; (8000548 <HAL_UART_RxCpltCallback+0x4c>)
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	2224      	movs	r2, #36	; 0x24
 8000514:	4293      	cmp	r3, r2
 8000516:	d10d      	bne.n	8000534 <HAL_UART_RxCpltCallback+0x38>
			check = 0;
 8000518:	4b0b      	ldr	r3, [pc, #44]	; (8000548 <HAL_UART_RxCpltCallback+0x4c>)
 800051a:	2200      	movs	r2, #0
 800051c:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive(huart, position_data_recieve_buf, sizeof(position_data_recieve_buf), HAL_MAX_DELAY);
 800051e:	f04f 33ff 	mov.w	r3, #4294967295
 8000522:	2218      	movs	r2, #24
 8000524:	4909      	ldr	r1, [pc, #36]	; (800054c <HAL_UART_RxCpltCallback+0x50>)
 8000526:	6878      	ldr	r0, [r7, #4]
 8000528:	f002 fb79 	bl	8002c1e <HAL_UART_Receive>
			state = RECIEVE_DATA;
 800052c:	4b08      	ldr	r3, [pc, #32]	; (8000550 <HAL_UART_RxCpltCallback+0x54>)
 800052e:	2202      	movs	r2, #2
 8000530:	701a      	strb	r2, [r3, #0]
		}else {
			state = TRIGGER_INTERRUPT;
		}
	}
}
 8000532:	e002      	b.n	800053a <HAL_UART_RxCpltCallback+0x3e>
			state = TRIGGER_INTERRUPT;
 8000534:	4b06      	ldr	r3, [pc, #24]	; (8000550 <HAL_UART_RxCpltCallback+0x54>)
 8000536:	2204      	movs	r2, #4
 8000538:	701a      	strb	r2, [r3, #0]
}
 800053a:	bf00      	nop
 800053c:	3708      	adds	r7, #8
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40004400 	.word	0x40004400
 8000548:	20000029 	.word	0x20000029
 800054c:	20000048 	.word	0x20000048
 8000550:	20000028 	.word	0x20000028

08000554 <unpack_position_data>:

position_data position_data_recieve;

void unpack_position_data(volatile uint8_t* buffer, position_data* data){
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	6039      	str	r1, [r7, #0]
	memcpy(data, buffer, sizeof(position_data));
 800055e:	2218      	movs	r2, #24
 8000560:	6879      	ldr	r1, [r7, #4]
 8000562:	6838      	ldr	r0, [r7, #0]
 8000564:	f003 fb0a 	bl	8003b7c <memcpy>
}
 8000568:	bf00      	nop
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}

08000570 <HAL_GPIO_EXTI_Callback>:

/* Debounce variables */
uint32_t last_interrupt_time = 0; // Timestamp of the last interrupt

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b088      	sub	sp, #32
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	80fb      	strh	r3, [r7, #6]
	//z motors
    if (GPIO_Pin == GPIO_PIN_6 || GPIO_Pin == GPIO_PIN_0) // Check if the interrupt is from PA6
 800057a:	88fb      	ldrh	r3, [r7, #6]
 800057c:	2b40      	cmp	r3, #64	; 0x40
 800057e:	d002      	beq.n	8000586 <HAL_GPIO_EXTI_Callback+0x16>
 8000580:	88fb      	ldrh	r3, [r7, #6]
 8000582:	2b01      	cmp	r3, #1
 8000584:	d121      	bne.n	80005ca <HAL_GPIO_EXTI_Callback+0x5a>
    {
        uint32_t current_time = HAL_GetTick(); // Get current time in ms
 8000586:	f000 ff77 	bl	8001478 <HAL_GetTick>
 800058a:	60f8      	str	r0, [r7, #12]
        if ((current_time - last_interrupt_time) > DEBOUNCE_DELAY)
 800058c:	4b62      	ldr	r3, [pc, #392]	; (8000718 <HAL_GPIO_EXTI_Callback+0x1a8>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	68fa      	ldr	r2, [r7, #12]
 8000592:	1ad3      	subs	r3, r2, r3
 8000594:	2b23      	cmp	r3, #35	; 0x23
 8000596:	f240 80b3 	bls.w	8000700 <HAL_GPIO_EXTI_Callback+0x190>
        {
            // Rising edge detected (after debounce)
            last_interrupt_time = current_time;
 800059a:	4a5f      	ldr	r2, [pc, #380]	; (8000718 <HAL_GPIO_EXTI_Callback+0x1a8>)
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	6013      	str	r3, [r2, #0]

            motor_z.stepper.run = !motor_z.stepper.run;//HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6); // Confirms that its pull up? - high until clicked?
 80005a0:	4b5e      	ldr	r3, [pc, #376]	; (800071c <HAL_GPIO_EXTI_Callback+0x1ac>)
 80005a2:	7d1b      	ldrb	r3, [r3, #20]
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	bf0c      	ite	eq
 80005aa:	2301      	moveq	r3, #1
 80005ac:	2300      	movne	r3, #0
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	461a      	mov	r2, r3
 80005b2:	4b5a      	ldr	r3, [pc, #360]	; (800071c <HAL_GPIO_EXTI_Callback+0x1ac>)
 80005b4:	751a      	strb	r2, [r3, #20]
//            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, motor_z.stepper.run);
            if(motor_z.stepper.run){
 80005b6:	4b59      	ldr	r3, [pc, #356]	; (800071c <HAL_GPIO_EXTI_Callback+0x1ac>)
 80005b8:	7d1b      	ldrb	r3, [r3, #20]
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	2b00      	cmp	r3, #0
 80005be:	f000 809f 	beq.w	8000700 <HAL_GPIO_EXTI_Callback+0x190>
            	state = TRANSMIT_DATA;
 80005c2:	4b57      	ldr	r3, [pc, #348]	; (8000720 <HAL_GPIO_EXTI_Callback+0x1b0>)
 80005c4:	2205      	movs	r2, #5
 80005c6:	701a      	strb	r2, [r3, #0]
    {
 80005c8:	e09a      	b.n	8000700 <HAL_GPIO_EXTI_Callback+0x190>
            }
        }
    } //y motors
    else if (GPIO_Pin == GPIO_PIN_1 || GPIO_Pin == GPIO_PIN_2) // Check if the interrupt is from PA6
 80005ca:	88fb      	ldrh	r3, [r7, #6]
 80005cc:	2b02      	cmp	r3, #2
 80005ce:	d002      	beq.n	80005d6 <HAL_GPIO_EXTI_Callback+0x66>
 80005d0:	88fb      	ldrh	r3, [r7, #6]
 80005d2:	2b04      	cmp	r3, #4
 80005d4:	d120      	bne.n	8000618 <HAL_GPIO_EXTI_Callback+0xa8>
	{
		uint32_t current_time = HAL_GetTick(); // Get current time in ms
 80005d6:	f000 ff4f 	bl	8001478 <HAL_GetTick>
 80005da:	6138      	str	r0, [r7, #16]
		if ((current_time - last_interrupt_time) > DEBOUNCE_DELAY)
 80005dc:	4b4e      	ldr	r3, [pc, #312]	; (8000718 <HAL_GPIO_EXTI_Callback+0x1a8>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	693a      	ldr	r2, [r7, #16]
 80005e2:	1ad3      	subs	r3, r2, r3
 80005e4:	2b23      	cmp	r3, #35	; 0x23
 80005e6:	f240 808d 	bls.w	8000704 <HAL_GPIO_EXTI_Callback+0x194>
		{
			// Rising edge detected (after debounce)
			last_interrupt_time = current_time;
 80005ea:	4a4b      	ldr	r2, [pc, #300]	; (8000718 <HAL_GPIO_EXTI_Callback+0x1a8>)
 80005ec:	693b      	ldr	r3, [r7, #16]
 80005ee:	6013      	str	r3, [r2, #0]

			motor_y.stepper.run = !motor_y.stepper.run;//HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6); // Confirms that its pull up? - high until clicked?
 80005f0:	4b4c      	ldr	r3, [pc, #304]	; (8000724 <HAL_GPIO_EXTI_Callback+0x1b4>)
 80005f2:	7d1b      	ldrb	r3, [r3, #20]
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	bf0c      	ite	eq
 80005fa:	2301      	moveq	r3, #1
 80005fc:	2300      	movne	r3, #0
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	461a      	mov	r2, r3
 8000602:	4b48      	ldr	r3, [pc, #288]	; (8000724 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000604:	751a      	strb	r2, [r3, #20]
//			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, motor_y.stepper.run);
			if(motor_y.stepper.run){
 8000606:	4b47      	ldr	r3, [pc, #284]	; (8000724 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000608:	7d1b      	ldrb	r3, [r3, #20]
 800060a:	b2db      	uxtb	r3, r3
 800060c:	2b00      	cmp	r3, #0
 800060e:	d079      	beq.n	8000704 <HAL_GPIO_EXTI_Callback+0x194>
				state = TRANSMIT_DATA;
 8000610:	4b43      	ldr	r3, [pc, #268]	; (8000720 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8000612:	2205      	movs	r2, #5
 8000614:	701a      	strb	r2, [r3, #0]
	{
 8000616:	e075      	b.n	8000704 <HAL_GPIO_EXTI_Callback+0x194>
			}
		}
	}//x motors
    else if (GPIO_Pin == GPIO_PIN_3 || GPIO_Pin == GPIO_PIN_4) // Check if the interrupt is from PA6
 8000618:	88fb      	ldrh	r3, [r7, #6]
 800061a:	2b08      	cmp	r3, #8
 800061c:	d002      	beq.n	8000624 <HAL_GPIO_EXTI_Callback+0xb4>
 800061e:	88fb      	ldrh	r3, [r7, #6]
 8000620:	2b10      	cmp	r3, #16
 8000622:	d11f      	bne.n	8000664 <HAL_GPIO_EXTI_Callback+0xf4>
	{
		uint32_t current_time = HAL_GetTick(); // Get current time in ms
 8000624:	f000 ff28 	bl	8001478 <HAL_GetTick>
 8000628:	6178      	str	r0, [r7, #20]
		if ((current_time - last_interrupt_time) > DEBOUNCE_DELAY)
 800062a:	4b3b      	ldr	r3, [pc, #236]	; (8000718 <HAL_GPIO_EXTI_Callback+0x1a8>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	697a      	ldr	r2, [r7, #20]
 8000630:	1ad3      	subs	r3, r2, r3
 8000632:	2b23      	cmp	r3, #35	; 0x23
 8000634:	d968      	bls.n	8000708 <HAL_GPIO_EXTI_Callback+0x198>
		{
			// Rising edge detected (after debounce)
			last_interrupt_time = current_time;
 8000636:	4a38      	ldr	r2, [pc, #224]	; (8000718 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	6013      	str	r3, [r2, #0]

			motor_x.stepper.run = !motor_x.stepper.run;//HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6); // Confirms that its pull up? - high until clicked?
 800063c:	4b3a      	ldr	r3, [pc, #232]	; (8000728 <HAL_GPIO_EXTI_Callback+0x1b8>)
 800063e:	7d1b      	ldrb	r3, [r3, #20]
 8000640:	b2db      	uxtb	r3, r3
 8000642:	2b00      	cmp	r3, #0
 8000644:	bf0c      	ite	eq
 8000646:	2301      	moveq	r3, #1
 8000648:	2300      	movne	r3, #0
 800064a:	b2db      	uxtb	r3, r3
 800064c:	461a      	mov	r2, r3
 800064e:	4b36      	ldr	r3, [pc, #216]	; (8000728 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000650:	751a      	strb	r2, [r3, #20]
//			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, motor_x.stepper.run);
			if(motor_x.stepper.run){
 8000652:	4b35      	ldr	r3, [pc, #212]	; (8000728 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000654:	7d1b      	ldrb	r3, [r3, #20]
 8000656:	b2db      	uxtb	r3, r3
 8000658:	2b00      	cmp	r3, #0
 800065a:	d055      	beq.n	8000708 <HAL_GPIO_EXTI_Callback+0x198>
				state = TRANSMIT_DATA;
 800065c:	4b30      	ldr	r3, [pc, #192]	; (8000720 <HAL_GPIO_EXTI_Callback+0x1b0>)
 800065e:	2205      	movs	r2, #5
 8000660:	701a      	strb	r2, [r3, #0]
	{
 8000662:	e051      	b.n	8000708 <HAL_GPIO_EXTI_Callback+0x198>
			}
		}
	}//r motors
    else if (GPIO_Pin == GPIO_PIN_5 || GPIO_Pin == GPIO_PIN_7) // Check if the interrupt is from PA6
 8000664:	88fb      	ldrh	r3, [r7, #6]
 8000666:	2b20      	cmp	r3, #32
 8000668:	d002      	beq.n	8000670 <HAL_GPIO_EXTI_Callback+0x100>
 800066a:	88fb      	ldrh	r3, [r7, #6]
 800066c:	2b80      	cmp	r3, #128	; 0x80
 800066e:	d11f      	bne.n	80006b0 <HAL_GPIO_EXTI_Callback+0x140>
	{
		uint32_t current_time = HAL_GetTick(); // Get current time in ms
 8000670:	f000 ff02 	bl	8001478 <HAL_GetTick>
 8000674:	61b8      	str	r0, [r7, #24]
		if ((current_time - last_interrupt_time) > DEBOUNCE_DELAY)
 8000676:	4b28      	ldr	r3, [pc, #160]	; (8000718 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	69ba      	ldr	r2, [r7, #24]
 800067c:	1ad3      	subs	r3, r2, r3
 800067e:	2b23      	cmp	r3, #35	; 0x23
 8000680:	d944      	bls.n	800070c <HAL_GPIO_EXTI_Callback+0x19c>
		{
			// Rising edge detected (after debounce)
			last_interrupt_time = current_time;
 8000682:	4a25      	ldr	r2, [pc, #148]	; (8000718 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000684:	69bb      	ldr	r3, [r7, #24]
 8000686:	6013      	str	r3, [r2, #0]

			motor_r.stepper.run = !motor_r.stepper.run;//HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6); // Confirms that its pull up? - high until clicked?
 8000688:	4b28      	ldr	r3, [pc, #160]	; (800072c <HAL_GPIO_EXTI_Callback+0x1bc>)
 800068a:	7d1b      	ldrb	r3, [r3, #20]
 800068c:	b2db      	uxtb	r3, r3
 800068e:	2b00      	cmp	r3, #0
 8000690:	bf0c      	ite	eq
 8000692:	2301      	moveq	r3, #1
 8000694:	2300      	movne	r3, #0
 8000696:	b2db      	uxtb	r3, r3
 8000698:	461a      	mov	r2, r3
 800069a:	4b24      	ldr	r3, [pc, #144]	; (800072c <HAL_GPIO_EXTI_Callback+0x1bc>)
 800069c:	751a      	strb	r2, [r3, #20]
//			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, motor_r.stepper.run);
			if(motor_r.stepper.run){
 800069e:	4b23      	ldr	r3, [pc, #140]	; (800072c <HAL_GPIO_EXTI_Callback+0x1bc>)
 80006a0:	7d1b      	ldrb	r3, [r3, #20]
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d031      	beq.n	800070c <HAL_GPIO_EXTI_Callback+0x19c>
				state = TRANSMIT_DATA;
 80006a8:	4b1d      	ldr	r3, [pc, #116]	; (8000720 <HAL_GPIO_EXTI_Callback+0x1b0>)
 80006aa:	2205      	movs	r2, #5
 80006ac:	701a      	strb	r2, [r3, #0]
	{
 80006ae:	e02d      	b.n	800070c <HAL_GPIO_EXTI_Callback+0x19c>
			}
		}
	}//n motor
    else if (GPIO_Pin == GPIO_PIN_8 || GPIO_Pin == GPIO_PIN_9) // Check if the interrupt is from PA6
 80006b0:	88fb      	ldrh	r3, [r7, #6]
 80006b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80006b6:	d003      	beq.n	80006c0 <HAL_GPIO_EXTI_Callback+0x150>
 80006b8:	88fb      	ldrh	r3, [r7, #6]
 80006ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80006be:	d126      	bne.n	800070e <HAL_GPIO_EXTI_Callback+0x19e>
	{
		uint32_t current_time = HAL_GetTick(); // Get current time in ms
 80006c0:	f000 feda 	bl	8001478 <HAL_GetTick>
 80006c4:	61f8      	str	r0, [r7, #28]
		if ((current_time - last_interrupt_time) > DEBOUNCE_DELAY)
 80006c6:	4b14      	ldr	r3, [pc, #80]	; (8000718 <HAL_GPIO_EXTI_Callback+0x1a8>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	69fa      	ldr	r2, [r7, #28]
 80006cc:	1ad3      	subs	r3, r2, r3
 80006ce:	2b23      	cmp	r3, #35	; 0x23
 80006d0:	d91d      	bls.n	800070e <HAL_GPIO_EXTI_Callback+0x19e>
		{
			// Rising edge detected (after debounce)
			last_interrupt_time = current_time;
 80006d2:	4a11      	ldr	r2, [pc, #68]	; (8000718 <HAL_GPIO_EXTI_Callback+0x1a8>)
 80006d4:	69fb      	ldr	r3, [r7, #28]
 80006d6:	6013      	str	r3, [r2, #0]

			motor_n.stepper.run = !motor_n.stepper.run;//HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6); // Confirms that its pull up? - high until clicked?
 80006d8:	4b15      	ldr	r3, [pc, #84]	; (8000730 <HAL_GPIO_EXTI_Callback+0x1c0>)
 80006da:	7d1b      	ldrb	r3, [r3, #20]
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	2b00      	cmp	r3, #0
 80006e0:	bf0c      	ite	eq
 80006e2:	2301      	moveq	r3, #1
 80006e4:	2300      	movne	r3, #0
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	461a      	mov	r2, r3
 80006ea:	4b11      	ldr	r3, [pc, #68]	; (8000730 <HAL_GPIO_EXTI_Callback+0x1c0>)
 80006ec:	751a      	strb	r2, [r3, #20]
//			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, motor_r.stepper.run);
			if(motor_n.stepper.run){
 80006ee:	4b10      	ldr	r3, [pc, #64]	; (8000730 <HAL_GPIO_EXTI_Callback+0x1c0>)
 80006f0:	7d1b      	ldrb	r3, [r3, #20]
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d00a      	beq.n	800070e <HAL_GPIO_EXTI_Callback+0x19e>
				state = TRANSMIT_DATA;
 80006f8:	4b09      	ldr	r3, [pc, #36]	; (8000720 <HAL_GPIO_EXTI_Callback+0x1b0>)
 80006fa:	2205      	movs	r2, #5
 80006fc:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 80006fe:	e006      	b.n	800070e <HAL_GPIO_EXTI_Callback+0x19e>
    {
 8000700:	bf00      	nop
 8000702:	e004      	b.n	800070e <HAL_GPIO_EXTI_Callback+0x19e>
	{
 8000704:	bf00      	nop
 8000706:	e002      	b.n	800070e <HAL_GPIO_EXTI_Callback+0x19e>
	{
 8000708:	bf00      	nop
 800070a:	e000      	b.n	800070e <HAL_GPIO_EXTI_Callback+0x19e>
	{
 800070c:	bf00      	nop
}
 800070e:	bf00      	nop
 8000710:	3720      	adds	r7, #32
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	2000002c 	.word	0x2000002c
 800071c:	200000d8 	.word	0x200000d8
 8000720:	20000028 	.word	0x20000028
 8000724:	2000014c 	.word	0x2000014c
 8000728:	20000060 	.word	0x20000060
 800072c:	20000030 	.word	0x20000030
 8000730:	20000078 	.word	0x20000078

08000734 <delayMicroseconds>:

void delayMicroseconds(uint16_t us) {
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	80fb      	strh	r3, [r7, #6]
    // Reset the timer counter
    __HAL_TIM_SET_COUNTER(&htim6, 0);
 800073e:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <delayMicroseconds+0x34>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	2200      	movs	r2, #0
 8000744:	625a      	str	r2, [r3, #36]	; 0x24
    // Start the timer
    HAL_TIM_Base_Start(&htim6);
 8000746:	4808      	ldr	r0, [pc, #32]	; (8000768 <delayMicroseconds+0x34>)
 8000748:	f001 ffde 	bl	8002708 <HAL_TIM_Base_Start>

    // Wait until the timer counter reaches the desired delay in microseconds
    while (__HAL_TIM_GET_COUNTER(&htim6) < us);
 800074c:	bf00      	nop
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <delayMicroseconds+0x34>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000754:	88fb      	ldrh	r3, [r7, #6]
 8000756:	429a      	cmp	r2, r3
 8000758:	d3f9      	bcc.n	800074e <delayMicroseconds+0x1a>

    // Stop the timer after the delay is completed
    HAL_TIM_Base_Stop(&htim6);
 800075a:	4803      	ldr	r0, [pc, #12]	; (8000768 <delayMicroseconds+0x34>)
 800075c:	f002 f83c 	bl	80027d8 <HAL_TIM_Base_Stop>
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000090 	.word	0x20000090

0800076c <stepper_move_steps>:

void stepper_move_steps(motor_data* motor, uint32_t steps, uint8_t direction) { // CW - 1, CCW - 0
 800076c:	b580      	push	{r7, lr}
 800076e:	b086      	sub	sp, #24
 8000770:	af00      	add	r7, sp, #0
 8000772:	60f8      	str	r0, [r7, #12]
 8000774:	60b9      	str	r1, [r7, #8]
 8000776:	4613      	mov	r3, r2
 8000778:	71fb      	strb	r3, [r7, #7]

    if(direction){
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d009      	beq.n	8000794 <stepper_move_steps+0x28>
		HAL_GPIO_WritePin(motor->direction_port, motor->direction_pin, motor->cw_dir);
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	6818      	ldr	r0, [r3, #0]
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	8899      	ldrh	r1, [r3, #4]
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	7bdb      	ldrb	r3, [r3, #15]
 800078c:	461a      	mov	r2, r3
 800078e:	f001 f9cf 	bl	8001b30 <HAL_GPIO_WritePin>
 8000792:	e008      	b.n	80007a6 <stepper_move_steps+0x3a>
    }else{
    	HAL_GPIO_WritePin(motor->direction_port, motor->direction_pin, motor->ccw_dir);
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	6818      	ldr	r0, [r3, #0]
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	8899      	ldrh	r1, [r3, #4]
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	7b9b      	ldrb	r3, [r3, #14]
 80007a0:	461a      	mov	r2, r3
 80007a2:	f001 f9c5 	bl	8001b30 <HAL_GPIO_WritePin>
    }

    for (int i = 0; i < steps && motor->stepper.run; i++) {
 80007a6:	2300      	movs	r3, #0
 80007a8:	617b      	str	r3, [r7, #20]
 80007aa:	e026      	b.n	80007fa <stepper_move_steps+0x8e>
    	if(direction){
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d005      	beq.n	80007be <stepper_move_steps+0x52>
    		motor->stepper.step++;
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	691b      	ldr	r3, [r3, #16]
 80007b6:	1c5a      	adds	r2, r3, #1
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	611a      	str	r2, [r3, #16]
 80007bc:	e004      	b.n	80007c8 <stepper_move_steps+0x5c>
    	}else{
    		motor->stepper.step--;
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	691b      	ldr	r3, [r3, #16]
 80007c2:	1e5a      	subs	r2, r3, #1
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	611a      	str	r2, [r3, #16]
    	}
    	// Generate a step pulse
        HAL_GPIO_WritePin(motor->step_port, motor->step_pin, 1);   // Set PA1 high
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	6898      	ldr	r0, [r3, #8]
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	899b      	ldrh	r3, [r3, #12]
 80007d0:	2201      	movs	r2, #1
 80007d2:	4619      	mov	r1, r3
 80007d4:	f001 f9ac 	bl	8001b30 <HAL_GPIO_WritePin>
//        delayMicroseconds((SPR*1000000 / (steps*2)));                // Short delay (half of STEP_DELAY)
        delayMicroseconds(STEP_DELAY);
 80007d8:	2014      	movs	r0, #20
 80007da:	f7ff ffab 	bl	8000734 <delayMicroseconds>

        HAL_GPIO_WritePin(motor->step_port, motor->step_pin, 0); // Set PA1 low
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	6898      	ldr	r0, [r3, #8]
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	899b      	ldrh	r3, [r3, #12]
 80007e6:	2200      	movs	r2, #0
 80007e8:	4619      	mov	r1, r3
 80007ea:	f001 f9a1 	bl	8001b30 <HAL_GPIO_WritePin>
//        delayMicroseconds((SPR*1000000 / (steps*2)));                 // Short delay (half of STEP_DELAY)
        delayMicroseconds(STEP_DELAY);
 80007ee:	2014      	movs	r0, #20
 80007f0:	f7ff ffa0 	bl	8000734 <delayMicroseconds>
    for (int i = 0; i < steps && motor->stepper.run; i++) {
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	3301      	adds	r3, #1
 80007f8:	617b      	str	r3, [r7, #20]
 80007fa:	697b      	ldr	r3, [r7, #20]
 80007fc:	68ba      	ldr	r2, [r7, #8]
 80007fe:	429a      	cmp	r2, r3
 8000800:	d903      	bls.n	800080a <stepper_move_steps+0x9e>
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	7d1b      	ldrb	r3, [r3, #20]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d1d0      	bne.n	80007ac <stepper_move_steps+0x40>
    }


    if(!motor->stepper.run){
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	7d1b      	ldrb	r3, [r3, #20]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d145      	bne.n	800089e <stepper_move_steps+0x132>
    	direction = !direction;
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	2b00      	cmp	r3, #0
 8000816:	bf0c      	ite	eq
 8000818:	2301      	moveq	r3, #1
 800081a:	2300      	movne	r3, #0
 800081c:	b2db      	uxtb	r3, r3
 800081e:	71fb      	strb	r3, [r7, #7]

        if(direction){
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d009      	beq.n	800083a <stepper_move_steps+0xce>
    		HAL_GPIO_WritePin(motor->direction_port, motor->direction_pin, motor->cw_dir);
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	6818      	ldr	r0, [r3, #0]
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	8899      	ldrh	r1, [r3, #4]
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	7bdb      	ldrb	r3, [r3, #15]
 8000832:	461a      	mov	r2, r3
 8000834:	f001 f97c 	bl	8001b30 <HAL_GPIO_WritePin>
 8000838:	e02d      	b.n	8000896 <stepper_move_steps+0x12a>
        }else{
        	HAL_GPIO_WritePin(motor->direction_port, motor->direction_pin, motor->ccw_dir);
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	6818      	ldr	r0, [r3, #0]
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	8899      	ldrh	r1, [r3, #4]
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	7b9b      	ldrb	r3, [r3, #14]
 8000846:	461a      	mov	r2, r3
 8000848:	f001 f972 	bl	8001b30 <HAL_GPIO_WritePin>
        }

        while(!motor->stepper.run) {
 800084c:	e023      	b.n	8000896 <stepper_move_steps+0x12a>
        	if(direction){
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d005      	beq.n	8000860 <stepper_move_steps+0xf4>
        		motor->stepper.step++;
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	691b      	ldr	r3, [r3, #16]
 8000858:	1c5a      	adds	r2, r3, #1
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	611a      	str	r2, [r3, #16]
 800085e:	e004      	b.n	800086a <stepper_move_steps+0xfe>
        	}else{
        		motor->stepper.step--;
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	691b      	ldr	r3, [r3, #16]
 8000864:	1e5a      	subs	r2, r3, #1
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	611a      	str	r2, [r3, #16]
        	}
        	// Generate a step pulse
            HAL_GPIO_WritePin(motor->step_port, motor->step_pin, 1);   // Set PA1 high
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	6898      	ldr	r0, [r3, #8]
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	899b      	ldrh	r3, [r3, #12]
 8000872:	2201      	movs	r2, #1
 8000874:	4619      	mov	r1, r3
 8000876:	f001 f95b 	bl	8001b30 <HAL_GPIO_WritePin>
    //        delayMicroseconds((SPR*1000000 / (steps*2)));                // Short delay (half of STEP_DELAY)
            delayMicroseconds(STEP_DELAY);
 800087a:	2014      	movs	r0, #20
 800087c:	f7ff ff5a 	bl	8000734 <delayMicroseconds>

            HAL_GPIO_WritePin(motor->step_port, motor->step_pin, 0); // Set PA1 low
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	6898      	ldr	r0, [r3, #8]
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	899b      	ldrh	r3, [r3, #12]
 8000888:	2200      	movs	r2, #0
 800088a:	4619      	mov	r1, r3
 800088c:	f001 f950 	bl	8001b30 <HAL_GPIO_WritePin>
    //        delayMicroseconds((SPR*1000000 / (steps*2)));                 // Short delay (half of STEP_DELAY)
            delayMicroseconds(STEP_DELAY);
 8000890:	2014      	movs	r0, #20
 8000892:	f7ff ff4f 	bl	8000734 <delayMicroseconds>
        while(!motor->stepper.run) {
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	7d1b      	ldrb	r3, [r3, #20]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d0d7      	beq.n	800084e <stepper_move_steps+0xe2>
        }
    }
}
 800089e:	bf00      	nop
 80008a0:	3718      	adds	r7, #24
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
	...

080008a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08c      	sub	sp, #48	; 0x30
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ae:	f000 fd7d 	bl	80013ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008b2:	f000 fa93 	bl	8000ddc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008b6:	f000 fb5f 	bl	8000f78 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008ba:	f000 fb33 	bl	8000f24 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80008be:	f000 fafb 	bl	8000eb8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  //init
  motor_z.direction_port = GPIOA;
 80008c2:	4ba3      	ldr	r3, [pc, #652]	; (8000b50 <main+0x2a8>)
 80008c4:	4aa3      	ldr	r2, [pc, #652]	; (8000b54 <main+0x2ac>)
 80008c6:	601a      	str	r2, [r3, #0]
  motor_z.direction_pin = GPIO_PIN_4;
 80008c8:	4ba1      	ldr	r3, [pc, #644]	; (8000b50 <main+0x2a8>)
 80008ca:	2210      	movs	r2, #16
 80008cc:	809a      	strh	r2, [r3, #4]
  motor_z.step_port = GPIOA;
 80008ce:	4ba0      	ldr	r3, [pc, #640]	; (8000b50 <main+0x2a8>)
 80008d0:	4aa0      	ldr	r2, [pc, #640]	; (8000b54 <main+0x2ac>)
 80008d2:	609a      	str	r2, [r3, #8]
  motor_z.step_pin = GPIO_PIN_1;
 80008d4:	4b9e      	ldr	r3, [pc, #632]	; (8000b50 <main+0x2a8>)
 80008d6:	2202      	movs	r2, #2
 80008d8:	819a      	strh	r2, [r3, #12]
  motor_z.cw_dir = 1;
 80008da:	4b9d      	ldr	r3, [pc, #628]	; (8000b50 <main+0x2a8>)
 80008dc:	2201      	movs	r2, #1
 80008de:	73da      	strb	r2, [r3, #15]
  motor_z.ccw_dir = 0;
 80008e0:	4b9b      	ldr	r3, [pc, #620]	; (8000b50 <main+0x2a8>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	739a      	strb	r2, [r3, #14]
  motor_z.stepper.run = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 80008e6:	2140      	movs	r1, #64	; 0x40
 80008e8:	489b      	ldr	r0, [pc, #620]	; (8000b58 <main+0x2b0>)
 80008ea:	f001 f909 	bl	8001b00 <HAL_GPIO_ReadPin>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d008      	beq.n	8000906 <main+0x5e>
 80008f4:	2101      	movs	r1, #1
 80008f6:	4898      	ldr	r0, [pc, #608]	; (8000b58 <main+0x2b0>)
 80008f8:	f001 f902 	bl	8001b00 <HAL_GPIO_ReadPin>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <main+0x5e>
 8000902:	2301      	movs	r3, #1
 8000904:	e000      	b.n	8000908 <main+0x60>
 8000906:	2300      	movs	r3, #0
 8000908:	b2da      	uxtb	r2, r3
 800090a:	4b91      	ldr	r3, [pc, #580]	; (8000b50 <main+0x2a8>)
 800090c:	751a      	strb	r2, [r3, #20]

  motor_y.direction_port = GPIOA;
 800090e:	4b93      	ldr	r3, [pc, #588]	; (8000b5c <main+0x2b4>)
 8000910:	4a90      	ldr	r2, [pc, #576]	; (8000b54 <main+0x2ac>)
 8000912:	601a      	str	r2, [r3, #0]
  motor_y.direction_pin = GPIO_PIN_7;
 8000914:	4b91      	ldr	r3, [pc, #580]	; (8000b5c <main+0x2b4>)
 8000916:	2280      	movs	r2, #128	; 0x80
 8000918:	809a      	strh	r2, [r3, #4]
  motor_y.step_port = GPIOA;
 800091a:	4b90      	ldr	r3, [pc, #576]	; (8000b5c <main+0x2b4>)
 800091c:	4a8d      	ldr	r2, [pc, #564]	; (8000b54 <main+0x2ac>)
 800091e:	609a      	str	r2, [r3, #8]
  motor_y.step_pin = GPIO_PIN_6;
 8000920:	4b8e      	ldr	r3, [pc, #568]	; (8000b5c <main+0x2b4>)
 8000922:	2240      	movs	r2, #64	; 0x40
 8000924:	819a      	strh	r2, [r3, #12]
  motor_y.cw_dir = 1;
 8000926:	4b8d      	ldr	r3, [pc, #564]	; (8000b5c <main+0x2b4>)
 8000928:	2201      	movs	r2, #1
 800092a:	73da      	strb	r2, [r3, #15]
  motor_y.ccw_dir = 0;
 800092c:	4b8b      	ldr	r3, [pc, #556]	; (8000b5c <main+0x2b4>)
 800092e:	2200      	movs	r2, #0
 8000930:	739a      	strb	r2, [r3, #14]
  motor_y.stepper.run = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);
 8000932:	2102      	movs	r1, #2
 8000934:	4888      	ldr	r0, [pc, #544]	; (8000b58 <main+0x2b0>)
 8000936:	f001 f8e3 	bl	8001b00 <HAL_GPIO_ReadPin>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d008      	beq.n	8000952 <main+0xaa>
 8000940:	2104      	movs	r1, #4
 8000942:	4885      	ldr	r0, [pc, #532]	; (8000b58 <main+0x2b0>)
 8000944:	f001 f8dc 	bl	8001b00 <HAL_GPIO_ReadPin>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <main+0xaa>
 800094e:	2301      	movs	r3, #1
 8000950:	e000      	b.n	8000954 <main+0xac>
 8000952:	2300      	movs	r3, #0
 8000954:	b2da      	uxtb	r2, r3
 8000956:	4b81      	ldr	r3, [pc, #516]	; (8000b5c <main+0x2b4>)
 8000958:	751a      	strb	r2, [r3, #20]

  motor_x.direction_port = GPIOA;
 800095a:	4b81      	ldr	r3, [pc, #516]	; (8000b60 <main+0x2b8>)
 800095c:	4a7d      	ldr	r2, [pc, #500]	; (8000b54 <main+0x2ac>)
 800095e:	601a      	str	r2, [r3, #0]
  motor_x.direction_pin = GPIO_PIN_9;
 8000960:	4b7f      	ldr	r3, [pc, #508]	; (8000b60 <main+0x2b8>)
 8000962:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000966:	809a      	strh	r2, [r3, #4]
  motor_x.step_port = GPIOA;
 8000968:	4b7d      	ldr	r3, [pc, #500]	; (8000b60 <main+0x2b8>)
 800096a:	4a7a      	ldr	r2, [pc, #488]	; (8000b54 <main+0x2ac>)
 800096c:	609a      	str	r2, [r3, #8]
  motor_x.step_pin = GPIO_PIN_8;
 800096e:	4b7c      	ldr	r3, [pc, #496]	; (8000b60 <main+0x2b8>)
 8000970:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000974:	819a      	strh	r2, [r3, #12]
  motor_x.cw_dir = 1;
 8000976:	4b7a      	ldr	r3, [pc, #488]	; (8000b60 <main+0x2b8>)
 8000978:	2201      	movs	r2, #1
 800097a:	73da      	strb	r2, [r3, #15]
  motor_x.ccw_dir = 0;
 800097c:	4b78      	ldr	r3, [pc, #480]	; (8000b60 <main+0x2b8>)
 800097e:	2200      	movs	r2, #0
 8000980:	739a      	strb	r2, [r3, #14]
  motor_x.stepper.run = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4);
 8000982:	2108      	movs	r1, #8
 8000984:	4874      	ldr	r0, [pc, #464]	; (8000b58 <main+0x2b0>)
 8000986:	f001 f8bb 	bl	8001b00 <HAL_GPIO_ReadPin>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d008      	beq.n	80009a2 <main+0xfa>
 8000990:	2110      	movs	r1, #16
 8000992:	4871      	ldr	r0, [pc, #452]	; (8000b58 <main+0x2b0>)
 8000994:	f001 f8b4 	bl	8001b00 <HAL_GPIO_ReadPin>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <main+0xfa>
 800099e:	2301      	movs	r3, #1
 80009a0:	e000      	b.n	80009a4 <main+0xfc>
 80009a2:	2300      	movs	r3, #0
 80009a4:	b2da      	uxtb	r2, r3
 80009a6:	4b6e      	ldr	r3, [pc, #440]	; (8000b60 <main+0x2b8>)
 80009a8:	751a      	strb	r2, [r3, #20]

  motor_r.direction_port = GPIOA;
 80009aa:	4b6e      	ldr	r3, [pc, #440]	; (8000b64 <main+0x2bc>)
 80009ac:	4a69      	ldr	r2, [pc, #420]	; (8000b54 <main+0x2ac>)
 80009ae:	601a      	str	r2, [r3, #0]
  motor_r.direction_pin = GPIO_PIN_11;
 80009b0:	4b6c      	ldr	r3, [pc, #432]	; (8000b64 <main+0x2bc>)
 80009b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009b6:	809a      	strh	r2, [r3, #4]
  motor_r.step_port = GPIOA;
 80009b8:	4b6a      	ldr	r3, [pc, #424]	; (8000b64 <main+0x2bc>)
 80009ba:	4a66      	ldr	r2, [pc, #408]	; (8000b54 <main+0x2ac>)
 80009bc:	609a      	str	r2, [r3, #8]
  motor_r.step_pin = GPIO_PIN_10;
 80009be:	4b69      	ldr	r3, [pc, #420]	; (8000b64 <main+0x2bc>)
 80009c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009c4:	819a      	strh	r2, [r3, #12]
  motor_r.cw_dir = 1;
 80009c6:	4b67      	ldr	r3, [pc, #412]	; (8000b64 <main+0x2bc>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	73da      	strb	r2, [r3, #15]
  motor_r.ccw_dir = 0;
 80009cc:	4b65      	ldr	r3, [pc, #404]	; (8000b64 <main+0x2bc>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	739a      	strb	r2, [r3, #14]
  motor_r.stepper.run = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5) && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7);
 80009d2:	2120      	movs	r1, #32
 80009d4:	4860      	ldr	r0, [pc, #384]	; (8000b58 <main+0x2b0>)
 80009d6:	f001 f893 	bl	8001b00 <HAL_GPIO_ReadPin>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d008      	beq.n	80009f2 <main+0x14a>
 80009e0:	2180      	movs	r1, #128	; 0x80
 80009e2:	485d      	ldr	r0, [pc, #372]	; (8000b58 <main+0x2b0>)
 80009e4:	f001 f88c 	bl	8001b00 <HAL_GPIO_ReadPin>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <main+0x14a>
 80009ee:	2301      	movs	r3, #1
 80009f0:	e000      	b.n	80009f4 <main+0x14c>
 80009f2:	2300      	movs	r3, #0
 80009f4:	b2da      	uxtb	r2, r3
 80009f6:	4b5b      	ldr	r3, [pc, #364]	; (8000b64 <main+0x2bc>)
 80009f8:	751a      	strb	r2, [r3, #20]

  motor_n.direction_port = GPIOC;
 80009fa:	4b5b      	ldr	r3, [pc, #364]	; (8000b68 <main+0x2c0>)
 80009fc:	4a56      	ldr	r2, [pc, #344]	; (8000b58 <main+0x2b0>)
 80009fe:	601a      	str	r2, [r3, #0]
  motor_n.direction_pin = GPIO_PIN_10;
 8000a00:	4b59      	ldr	r3, [pc, #356]	; (8000b68 <main+0x2c0>)
 8000a02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a06:	809a      	strh	r2, [r3, #4]
  motor_n.step_port = GPIOC;
 8000a08:	4b57      	ldr	r3, [pc, #348]	; (8000b68 <main+0x2c0>)
 8000a0a:	4a53      	ldr	r2, [pc, #332]	; (8000b58 <main+0x2b0>)
 8000a0c:	609a      	str	r2, [r3, #8]
  motor_n.step_pin = GPIO_PIN_9;
 8000a0e:	4b56      	ldr	r3, [pc, #344]	; (8000b68 <main+0x2c0>)
 8000a10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a14:	819a      	strh	r2, [r3, #12]
  motor_n.cw_dir = 1;
 8000a16:	4b54      	ldr	r3, [pc, #336]	; (8000b68 <main+0x2c0>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	73da      	strb	r2, [r3, #15]
  motor_n.ccw_dir = 0;
 8000a1c:	4b52      	ldr	r3, [pc, #328]	; (8000b68 <main+0x2c0>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	739a      	strb	r2, [r3, #14]
  motor_n.stepper.run = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9);
 8000a22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a26:	4851      	ldr	r0, [pc, #324]	; (8000b6c <main+0x2c4>)
 8000a28:	f001 f86a 	bl	8001b00 <HAL_GPIO_ReadPin>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d009      	beq.n	8000a46 <main+0x19e>
 8000a32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a36:	484d      	ldr	r0, [pc, #308]	; (8000b6c <main+0x2c4>)
 8000a38:	f001 f862 	bl	8001b00 <HAL_GPIO_ReadPin>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <main+0x19e>
 8000a42:	2301      	movs	r3, #1
 8000a44:	e000      	b.n	8000a48 <main+0x1a0>
 8000a46:	2300      	movs	r3, #0
 8000a48:	b2da      	uxtb	r2, r3
 8000a4a:	4b47      	ldr	r3, [pc, #284]	; (8000b68 <main+0x2c0>)
 8000a4c:	751a      	strb	r2, [r3, #20]

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6));
 8000a4e:	2140      	movs	r1, #64	; 0x40
 8000a50:	4841      	ldr	r0, [pc, #260]	; (8000b58 <main+0x2b0>)
 8000a52:	f001 f855 	bl	8001b00 <HAL_GPIO_ReadPin>
 8000a56:	4603      	mov	r3, r0
 8000a58:	461a      	mov	r2, r3
 8000a5a:	2120      	movs	r1, #32
 8000a5c:	483d      	ldr	r0, [pc, #244]	; (8000b54 <main+0x2ac>)
 8000a5e:	f001 f867 	bl	8001b30 <HAL_GPIO_WritePin>

  uint32_t target_steps = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	62bb      	str	r3, [r7, #40]	; 0x28
  uint8_t dir = 0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6));
	  switch(state){
 8000a6c:	4b40      	ldr	r3, [pc, #256]	; (8000b70 <main+0x2c8>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	2b06      	cmp	r3, #6
 8000a74:	d8fa      	bhi.n	8000a6c <main+0x1c4>
 8000a76:	a201      	add	r2, pc, #4	; (adr r2, 8000a7c <main+0x1d4>)
 8000a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a7c:	08000a99 	.word	0x08000a99
 8000a80:	08000bdf 	.word	0x08000bdf
 8000a84:	08000b39 	.word	0x08000b39
 8000a88:	08000b49 	.word	0x08000b49
 8000a8c:	08000b2d 	.word	0x08000b2d
 8000a90:	08000b85 	.word	0x08000b85
 8000a94:	08000aa1 	.word	0x08000aa1
		  case IDLE:
			  state = TRIGGER_INTERRUPT;
 8000a98:	4b35      	ldr	r3, [pc, #212]	; (8000b70 <main+0x2c8>)
 8000a9a:	2204      	movs	r2, #4
 8000a9c:	701a      	strb	r2, [r3, #0]
//				  state = CALIBRATION;
//				  while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) != 1){
//
//				  }
//			  }
			  break;
 8000a9e:	e17d      	b.n	8000d9c <main+0x4f4>
		  case CALIBRATION:
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 0); // vacuum
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000aa6:	482c      	ldr	r0, [pc, #176]	; (8000b58 <main+0x2b0>)
 8000aa8:	f001 f842 	bl	8001b30 <HAL_GPIO_WritePin>

			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0); // nailgun
 8000aac:	2200      	movs	r2, #0
 8000aae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ab2:	4828      	ldr	r0, [pc, #160]	; (8000b54 <main+0x2ac>)
 8000ab4:	f001 f83c 	bl	8001b30 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000abe:	4825      	ldr	r0, [pc, #148]	; (8000b54 <main+0x2ac>)
 8000ac0:	f001 f836 	bl	8001b30 <HAL_GPIO_WritePin>

			  stepper_move_steps(&motor_z, UINT32_MAX, 0);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f04f 31ff 	mov.w	r1, #4294967295
 8000aca:	4821      	ldr	r0, [pc, #132]	; (8000b50 <main+0x2a8>)
 8000acc:	f7ff fe4e 	bl	800076c <stepper_move_steps>
			  stepper_move_steps(&motor_y, UINT32_MAX, 0);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	f04f 31ff 	mov.w	r1, #4294967295
 8000ad6:	4821      	ldr	r0, [pc, #132]	; (8000b5c <main+0x2b4>)
 8000ad8:	f7ff fe48 	bl	800076c <stepper_move_steps>
			  stepper_move_steps(&motor_x, UINT32_MAX, 0);
 8000adc:	2200      	movs	r2, #0
 8000ade:	f04f 31ff 	mov.w	r1, #4294967295
 8000ae2:	481f      	ldr	r0, [pc, #124]	; (8000b60 <main+0x2b8>)
 8000ae4:	f7ff fe42 	bl	800076c <stepper_move_steps>
			  stepper_move_steps(&motor_r, UINT32_MAX, 0);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f04f 31ff 	mov.w	r1, #4294967295
 8000aee:	481d      	ldr	r0, [pc, #116]	; (8000b64 <main+0x2bc>)
 8000af0:	f7ff fe3c 	bl	800076c <stepper_move_steps>
			  stepper_move_steps(&motor_n, UINT32_MAX, 0);
 8000af4:	2200      	movs	r2, #0
 8000af6:	f04f 31ff 	mov.w	r1, #4294967295
 8000afa:	481b      	ldr	r0, [pc, #108]	; (8000b68 <main+0x2c0>)
 8000afc:	f7ff fe36 	bl	800076c <stepper_move_steps>

			  motor_z.stepper.step = 0;
 8000b00:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <main+0x2a8>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	611a      	str	r2, [r3, #16]
			  motor_y.stepper.step = 0;
 8000b06:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <main+0x2b4>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	611a      	str	r2, [r3, #16]
			  motor_x.stepper.step = 0;
 8000b0c:	4b14      	ldr	r3, [pc, #80]	; (8000b60 <main+0x2b8>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	611a      	str	r2, [r3, #16]
			  motor_z.stepper.step = 0;
 8000b12:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <main+0x2a8>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
			  motor_r.stepper.step = 0;
 8000b18:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <main+0x2bc>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	611a      	str	r2, [r3, #16]
			  motor_n.stepper.step = 0;
 8000b1e:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <main+0x2c0>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	611a      	str	r2, [r3, #16]

			  state = TRANSMIT_DATA;
 8000b24:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <main+0x2c8>)
 8000b26:	2205      	movs	r2, #5
 8000b28:	701a      	strb	r2, [r3, #0]
//
//				  motor_z.stepper.step = 0;
//				  motor_y.stepper.step = 0;
//				  motor_x.stepper.step = 0;
//			  }
			  break;
 8000b2a:	e137      	b.n	8000d9c <main+0x4f4>
		  case TRIGGER_INTERRUPT:
			  //Will not queue interrupts
			  HAL_UART_Receive_IT(&huart2, &check, 1);
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	4911      	ldr	r1, [pc, #68]	; (8000b74 <main+0x2cc>)
 8000b30:	4811      	ldr	r0, [pc, #68]	; (8000b78 <main+0x2d0>)
 8000b32:	f002 f916 	bl	8002d62 <HAL_UART_Receive_IT>
			  break;
 8000b36:	e131      	b.n	8000d9c <main+0x4f4>
		  case RECIEVE_DATA:
			  unpack_position_data(position_data_recieve_buf, &position_data_recieve);
 8000b38:	4910      	ldr	r1, [pc, #64]	; (8000b7c <main+0x2d4>)
 8000b3a:	4811      	ldr	r0, [pc, #68]	; (8000b80 <main+0x2d8>)
 8000b3c:	f7ff fd0a 	bl	8000554 <unpack_position_data>
			  state = CONFIRM_RECIEVE_DATA;
 8000b40:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <main+0x2c8>)
 8000b42:	2203      	movs	r2, #3
 8000b44:	701a      	strb	r2, [r3, #0]
			  break;
 8000b46:	e129      	b.n	8000d9c <main+0x4f4>
		  case CONFIRM_RECIEVE_DATA:
//			  HAL_UART_Transmit(&huart2, (uint8_t*)&START_BYTE, sizeof(START_BYTE), HAL_MAX_DELAY);
//			  HAL_UART_Transmit(&huart2, (uint8_t*)&position_data_recieve, sizeof(position_data_recieve), HAL_MAX_DELAY);
			  state = MOTOR_ACTUATION;
 8000b48:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <main+0x2c8>)
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	701a      	strb	r2, [r3, #0]
			  break;
 8000b4e:	e125      	b.n	8000d9c <main+0x4f4>
 8000b50:	200000d8 	.word	0x200000d8
 8000b54:	40020000 	.word	0x40020000
 8000b58:	40020800 	.word	0x40020800
 8000b5c:	2000014c 	.word	0x2000014c
 8000b60:	20000060 	.word	0x20000060
 8000b64:	20000030 	.word	0x20000030
 8000b68:	20000078 	.word	0x20000078
 8000b6c:	40020400 	.word	0x40020400
 8000b70:	20000028 	.word	0x20000028
 8000b74:	20000029 	.word	0x20000029
 8000b78:	200000f0 	.word	0x200000f0
 8000b7c:	20000134 	.word	0x20000134
 8000b80:	20000048 	.word	0x20000048
		  case TRANSMIT_DATA:
//			  HAL_UART_Transmit(&huart2, (uint8_t*)&START_BYTE, sizeof(START_BYTE), HAL_MAX_DELAY);
//  			  HAL_UART_Transmit(&huart2, (uint8_t*)&motor_x, sizeof(motor_x), HAL_MAX_DELAY);

			  // Populate the array
			  memcpy(motor_data_transmit, &motor_z.stepper, sizeof(stepper_motor));
 8000b84:	463b      	mov	r3, r7
 8000b86:	2208      	movs	r2, #8
 8000b88:	4985      	ldr	r1, [pc, #532]	; (8000da0 <main+0x4f8>)
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f002 fff6 	bl	8003b7c <memcpy>
			  memcpy(motor_data_transmit + sizeof(stepper_motor), &motor_y.stepper, sizeof(stepper_motor));
 8000b90:	463b      	mov	r3, r7
 8000b92:	3308      	adds	r3, #8
 8000b94:	2208      	movs	r2, #8
 8000b96:	4983      	ldr	r1, [pc, #524]	; (8000da4 <main+0x4fc>)
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f002 ffef 	bl	8003b7c <memcpy>
			  memcpy(motor_data_transmit + 2*sizeof(stepper_motor), &motor_x.stepper, sizeof(stepper_motor));
 8000b9e:	463b      	mov	r3, r7
 8000ba0:	3310      	adds	r3, #16
 8000ba2:	2208      	movs	r2, #8
 8000ba4:	4980      	ldr	r1, [pc, #512]	; (8000da8 <main+0x500>)
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f002 ffe8 	bl	8003b7c <memcpy>
			  memcpy(motor_data_transmit + 3*sizeof(stepper_motor), &motor_r.stepper, sizeof(stepper_motor));
 8000bac:	463b      	mov	r3, r7
 8000bae:	3318      	adds	r3, #24
 8000bb0:	2208      	movs	r2, #8
 8000bb2:	497e      	ldr	r1, [pc, #504]	; (8000dac <main+0x504>)
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f002 ffe1 	bl	8003b7c <memcpy>
			  memcpy(motor_data_transmit + 4*sizeof(stepper_motor), &motor_n.stepper, sizeof(stepper_motor));
 8000bba:	463b      	mov	r3, r7
 8000bbc:	3320      	adds	r3, #32
 8000bbe:	2208      	movs	r2, #8
 8000bc0:	497b      	ldr	r1, [pc, #492]	; (8000db0 <main+0x508>)
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f002 ffda 	bl	8003b7c <memcpy>

			  // Transmit the array
			  HAL_UART_Transmit(&huart2, motor_data_transmit, sizeof(motor_data_transmit), HAL_MAX_DELAY);
 8000bc8:	4639      	mov	r1, r7
 8000bca:	f04f 33ff 	mov.w	r3, #4294967295
 8000bce:	2228      	movs	r2, #40	; 0x28
 8000bd0:	4878      	ldr	r0, [pc, #480]	; (8000db4 <main+0x50c>)
 8000bd2:	f001 ff92 	bl	8002afa <HAL_UART_Transmit>
			  state = TRIGGER_INTERRUPT;
 8000bd6:	4b78      	ldr	r3, [pc, #480]	; (8000db8 <main+0x510>)
 8000bd8:	2204      	movs	r2, #4
 8000bda:	701a      	strb	r2, [r3, #0]
			  break;
 8000bdc:	e0de      	b.n	8000d9c <main+0x4f4>
		  case MOTOR_ACTUATION:
			  if(position_data_recieve.cal){
 8000bde:	4b77      	ldr	r3, [pc, #476]	; (8000dbc <main+0x514>)
 8000be0:	7d9b      	ldrb	r3, [r3, #22]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d003      	beq.n	8000bee <main+0x346>
				  state = CALIBRATION;
 8000be6:	4b74      	ldr	r3, [pc, #464]	; (8000db8 <main+0x510>)
 8000be8:	2206      	movs	r2, #6
 8000bea:	701a      	strb	r2, [r3, #0]
					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);
					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
				  }
				  state = TRANSMIT_DATA;
			  }
			  break;
 8000bec:	e0d5      	b.n	8000d9a <main+0x4f2>
				  target_steps = abs(position_data_recieve.y_step- motor_y.stepper.step); //make this position specific
 8000bee:	4b73      	ldr	r3, [pc, #460]	; (8000dbc <main+0x514>)
 8000bf0:	685a      	ldr	r2, [r3, #4]
 8000bf2:	4b73      	ldr	r3, [pc, #460]	; (8000dc0 <main+0x518>)
 8000bf4:	691b      	ldr	r3, [r3, #16]
 8000bf6:	1ad3      	subs	r3, r2, r3
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	bfb8      	it	lt
 8000bfc:	425b      	neglt	r3, r3
 8000bfe:	62bb      	str	r3, [r7, #40]	; 0x28
				  if(target_steps > 0){
 8000c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d014      	beq.n	8000c30 <main+0x388>
					  if (position_data_recieve.y_step - motor_y.stepper.step > 0) {
 8000c06:	4b6d      	ldr	r3, [pc, #436]	; (8000dbc <main+0x514>)
 8000c08:	685a      	ldr	r2, [r3, #4]
 8000c0a:	4b6d      	ldr	r3, [pc, #436]	; (8000dc0 <main+0x518>)
 8000c0c:	691b      	ldr	r3, [r3, #16]
 8000c0e:	1ad3      	subs	r3, r2, r3
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	dd03      	ble.n	8000c1c <main+0x374>
						  dir = 1;  // Positive direction
 8000c14:	2301      	movs	r3, #1
 8000c16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000c1a:	e002      	b.n	8000c22 <main+0x37a>
						  dir = 0;  // Negative direction
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					  stepper_move_steps(&motor_y, target_steps, dir);
 8000c22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c26:	461a      	mov	r2, r3
 8000c28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000c2a:	4865      	ldr	r0, [pc, #404]	; (8000dc0 <main+0x518>)
 8000c2c:	f7ff fd9e 	bl	800076c <stepper_move_steps>
				  target_steps = abs(position_data_recieve.x_step- motor_x.stepper.step); //make this position specific
 8000c30:	4b62      	ldr	r3, [pc, #392]	; (8000dbc <main+0x514>)
 8000c32:	689a      	ldr	r2, [r3, #8]
 8000c34:	4b63      	ldr	r3, [pc, #396]	; (8000dc4 <main+0x51c>)
 8000c36:	691b      	ldr	r3, [r3, #16]
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	bfb8      	it	lt
 8000c3e:	425b      	neglt	r3, r3
 8000c40:	62bb      	str	r3, [r7, #40]	; 0x28
				  if(target_steps > 0){
 8000c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d014      	beq.n	8000c72 <main+0x3ca>
					  if (position_data_recieve.x_step - motor_x.stepper.step > 0) {
 8000c48:	4b5c      	ldr	r3, [pc, #368]	; (8000dbc <main+0x514>)
 8000c4a:	689a      	ldr	r2, [r3, #8]
 8000c4c:	4b5d      	ldr	r3, [pc, #372]	; (8000dc4 <main+0x51c>)
 8000c4e:	691b      	ldr	r3, [r3, #16]
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	dd03      	ble.n	8000c5e <main+0x3b6>
						  dir = 1;  // Positive direction
 8000c56:	2301      	movs	r3, #1
 8000c58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000c5c:	e002      	b.n	8000c64 <main+0x3bc>
						  dir = 0;  // Negative direction
 8000c5e:	2300      	movs	r3, #0
 8000c60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					  stepper_move_steps(&motor_x, target_steps, dir);
 8000c64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c68:	461a      	mov	r2, r3
 8000c6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000c6c:	4855      	ldr	r0, [pc, #340]	; (8000dc4 <main+0x51c>)
 8000c6e:	f7ff fd7d 	bl	800076c <stepper_move_steps>
				  target_steps = abs(position_data_recieve.z_step- motor_z.stepper.step); //make this position specific
 8000c72:	4b52      	ldr	r3, [pc, #328]	; (8000dbc <main+0x514>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	4b54      	ldr	r3, [pc, #336]	; (8000dc8 <main+0x520>)
 8000c78:	691b      	ldr	r3, [r3, #16]
 8000c7a:	1ad3      	subs	r3, r2, r3
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	bfb8      	it	lt
 8000c80:	425b      	neglt	r3, r3
 8000c82:	62bb      	str	r3, [r7, #40]	; 0x28
				  if(target_steps > 0){
 8000c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d014      	beq.n	8000cb4 <main+0x40c>
					  if (position_data_recieve.z_step - motor_z.stepper.step > 0) {
 8000c8a:	4b4c      	ldr	r3, [pc, #304]	; (8000dbc <main+0x514>)
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	4b4e      	ldr	r3, [pc, #312]	; (8000dc8 <main+0x520>)
 8000c90:	691b      	ldr	r3, [r3, #16]
 8000c92:	1ad3      	subs	r3, r2, r3
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	dd03      	ble.n	8000ca0 <main+0x3f8>
						  dir = 1;  // Positive direction
 8000c98:	2301      	movs	r3, #1
 8000c9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000c9e:	e002      	b.n	8000ca6 <main+0x3fe>
						  dir = 0;  // Negative direction
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					  stepper_move_steps(&motor_z, target_steps, dir);
 8000ca6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000caa:	461a      	mov	r2, r3
 8000cac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000cae:	4846      	ldr	r0, [pc, #280]	; (8000dc8 <main+0x520>)
 8000cb0:	f7ff fd5c 	bl	800076c <stepper_move_steps>
				  target_steps = abs(position_data_recieve.rotation_step- motor_r.stepper.step); //make this position specific
 8000cb4:	4b41      	ldr	r3, [pc, #260]	; (8000dbc <main+0x514>)
 8000cb6:	68da      	ldr	r2, [r3, #12]
 8000cb8:	4b44      	ldr	r3, [pc, #272]	; (8000dcc <main+0x524>)
 8000cba:	691b      	ldr	r3, [r3, #16]
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	bfb8      	it	lt
 8000cc2:	425b      	neglt	r3, r3
 8000cc4:	62bb      	str	r3, [r7, #40]	; 0x28
				  if(target_steps > 0){
 8000cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d014      	beq.n	8000cf6 <main+0x44e>
					  if (position_data_recieve.rotation_step - motor_r.stepper.step > 0) {
 8000ccc:	4b3b      	ldr	r3, [pc, #236]	; (8000dbc <main+0x514>)
 8000cce:	68da      	ldr	r2, [r3, #12]
 8000cd0:	4b3e      	ldr	r3, [pc, #248]	; (8000dcc <main+0x524>)
 8000cd2:	691b      	ldr	r3, [r3, #16]
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	dd03      	ble.n	8000ce2 <main+0x43a>
						  dir = 1;  // Positive direction
 8000cda:	2301      	movs	r3, #1
 8000cdc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000ce0:	e002      	b.n	8000ce8 <main+0x440>
						  dir = 0;  // Negative direction
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					  stepper_move_steps(&motor_r, target_steps, dir);
 8000ce8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000cec:	461a      	mov	r2, r3
 8000cee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000cf0:	4836      	ldr	r0, [pc, #216]	; (8000dcc <main+0x524>)
 8000cf2:	f7ff fd3b 	bl	800076c <stepper_move_steps>
				  target_steps = abs(position_data_recieve.nail_step- motor_n.stepper.step); //make this position specific
 8000cf6:	4b31      	ldr	r3, [pc, #196]	; (8000dbc <main+0x514>)
 8000cf8:	691a      	ldr	r2, [r3, #16]
 8000cfa:	4b35      	ldr	r3, [pc, #212]	; (8000dd0 <main+0x528>)
 8000cfc:	691b      	ldr	r3, [r3, #16]
 8000cfe:	1ad3      	subs	r3, r2, r3
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	bfb8      	it	lt
 8000d04:	425b      	neglt	r3, r3
 8000d06:	62bb      	str	r3, [r7, #40]	; 0x28
				  if(target_steps > 0){
 8000d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d014      	beq.n	8000d38 <main+0x490>
					  if (position_data_recieve.nail_step - motor_n.stepper.step > 0) {
 8000d0e:	4b2b      	ldr	r3, [pc, #172]	; (8000dbc <main+0x514>)
 8000d10:	691a      	ldr	r2, [r3, #16]
 8000d12:	4b2f      	ldr	r3, [pc, #188]	; (8000dd0 <main+0x528>)
 8000d14:	691b      	ldr	r3, [r3, #16]
 8000d16:	1ad3      	subs	r3, r2, r3
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	dd03      	ble.n	8000d24 <main+0x47c>
						  dir = 1;  // Positive direction
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000d22:	e002      	b.n	8000d2a <main+0x482>
						  dir = 0;  // Negative direction
 8000d24:	2300      	movs	r3, #0
 8000d26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					  stepper_move_steps(&motor_n, target_steps, dir);
 8000d2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d2e:	461a      	mov	r2, r3
 8000d30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000d32:	4827      	ldr	r0, [pc, #156]	; (8000dd0 <main+0x528>)
 8000d34:	f7ff fd1a 	bl	800076c <stepper_move_steps>
				  if(position_data_recieve.vacuum){
 8000d38:	4b20      	ldr	r3, [pc, #128]	; (8000dbc <main+0x514>)
 8000d3a:	7d5b      	ldrb	r3, [r3, #21]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d006      	beq.n	8000d4e <main+0x4a6>
					  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 1);
 8000d40:	2201      	movs	r2, #1
 8000d42:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d46:	4823      	ldr	r0, [pc, #140]	; (8000dd4 <main+0x52c>)
 8000d48:	f000 fef2 	bl	8001b30 <HAL_GPIO_WritePin>
 8000d4c:	e005      	b.n	8000d5a <main+0x4b2>
					  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 0);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d54:	481f      	ldr	r0, [pc, #124]	; (8000dd4 <main+0x52c>)
 8000d56:	f000 feeb 	bl	8001b30 <HAL_GPIO_WritePin>
				  if(position_data_recieve.nail){
 8000d5a:	4b18      	ldr	r3, [pc, #96]	; (8000dbc <main+0x514>)
 8000d5c:	7d1b      	ldrb	r3, [r3, #20]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d00c      	beq.n	8000d7c <main+0x4d4>
					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);
 8000d62:	2201      	movs	r2, #1
 8000d64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d68:	481b      	ldr	r0, [pc, #108]	; (8000dd8 <main+0x530>)
 8000d6a:	f000 fee1 	bl	8001b30 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d74:	4818      	ldr	r0, [pc, #96]	; (8000dd8 <main+0x530>)
 8000d76:	f000 fedb 	bl	8001b30 <HAL_GPIO_WritePin>
 8000d7a:	e00b      	b.n	8000d94 <main+0x4ec>
					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d82:	4815      	ldr	r0, [pc, #84]	; (8000dd8 <main+0x530>)
 8000d84:	f000 fed4 	bl	8001b30 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d8e:	4812      	ldr	r0, [pc, #72]	; (8000dd8 <main+0x530>)
 8000d90:	f000 fece 	bl	8001b30 <HAL_GPIO_WritePin>
				  state = TRANSMIT_DATA;
 8000d94:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <main+0x510>)
 8000d96:	2205      	movs	r2, #5
 8000d98:	701a      	strb	r2, [r3, #0]
			  break;
 8000d9a:	bf00      	nop
	  switch(state){
 8000d9c:	e666      	b.n	8000a6c <main+0x1c4>
 8000d9e:	bf00      	nop
 8000da0:	200000e8 	.word	0x200000e8
 8000da4:	2000015c 	.word	0x2000015c
 8000da8:	20000070 	.word	0x20000070
 8000dac:	20000040 	.word	0x20000040
 8000db0:	20000088 	.word	0x20000088
 8000db4:	200000f0 	.word	0x200000f0
 8000db8:	20000028 	.word	0x20000028
 8000dbc:	20000134 	.word	0x20000134
 8000dc0:	2000014c 	.word	0x2000014c
 8000dc4:	20000060 	.word	0x20000060
 8000dc8:	200000d8 	.word	0x200000d8
 8000dcc:	20000030 	.word	0x20000030
 8000dd0:	20000078 	.word	0x20000078
 8000dd4:	40020800 	.word	0x40020800
 8000dd8:	40020000 	.word	0x40020000

08000ddc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b094      	sub	sp, #80	; 0x50
 8000de0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000de2:	f107 031c 	add.w	r3, r7, #28
 8000de6:	2234      	movs	r2, #52	; 0x34
 8000de8:	2100      	movs	r1, #0
 8000dea:	4618      	mov	r0, r3
 8000dec:	f002 fed4 	bl	8003b98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000df0:	f107 0308 	add.w	r3, r7, #8
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e00:	2300      	movs	r3, #0
 8000e02:	607b      	str	r3, [r7, #4]
 8000e04:	4b2a      	ldr	r3, [pc, #168]	; (8000eb0 <SystemClock_Config+0xd4>)
 8000e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e08:	4a29      	ldr	r2, [pc, #164]	; (8000eb0 <SystemClock_Config+0xd4>)
 8000e0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e10:	4b27      	ldr	r3, [pc, #156]	; (8000eb0 <SystemClock_Config+0xd4>)
 8000e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e18:	607b      	str	r3, [r7, #4]
 8000e1a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	603b      	str	r3, [r7, #0]
 8000e20:	4b24      	ldr	r3, [pc, #144]	; (8000eb4 <SystemClock_Config+0xd8>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e28:	4a22      	ldr	r2, [pc, #136]	; (8000eb4 <SystemClock_Config+0xd8>)
 8000e2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e2e:	6013      	str	r3, [r2, #0]
 8000e30:	4b20      	ldr	r3, [pc, #128]	; (8000eb4 <SystemClock_Config+0xd8>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e38:	603b      	str	r3, [r7, #0]
 8000e3a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e40:	2301      	movs	r3, #1
 8000e42:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e44:	2310      	movs	r3, #16
 8000e46:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000e50:	2310      	movs	r3, #16
 8000e52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e54:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000e58:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e5a:	2304      	movs	r3, #4
 8000e5c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e62:	2302      	movs	r3, #2
 8000e64:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e66:	f107 031c 	add.w	r3, r7, #28
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f001 f95e 	bl	800212c <HAL_RCC_OscConfig>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000e76:	f000 f951 	bl	800111c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e7a:	230f      	movs	r3, #15
 8000e7c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e82:	2300      	movs	r3, #0
 8000e84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e90:	f107 0308 	add.w	r3, r7, #8
 8000e94:	2102      	movs	r1, #2
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 fe7c 	bl	8001b94 <HAL_RCC_ClockConfig>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000ea2:	f000 f93b 	bl	800111c <Error_Handler>
  }
}
 8000ea6:	bf00      	nop
 8000ea8:	3750      	adds	r7, #80	; 0x50
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	40007000 	.word	0x40007000

08000eb8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ebe:	463b      	mov	r3, r7
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000ec6:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <MX_TIM6_Init+0x64>)
 8000ec8:	4a15      	ldr	r2, [pc, #84]	; (8000f20 <MX_TIM6_Init+0x68>)
 8000eca:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 8000ecc:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <MX_TIM6_Init+0x64>)
 8000ece:	2253      	movs	r2, #83	; 0x53
 8000ed0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed2:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <MX_TIM6_Init+0x64>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000ed8:	4b10      	ldr	r3, [pc, #64]	; (8000f1c <MX_TIM6_Init+0x64>)
 8000eda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ede:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee0:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <MX_TIM6_Init+0x64>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ee6:	480d      	ldr	r0, [pc, #52]	; (8000f1c <MX_TIM6_Init+0x64>)
 8000ee8:	f001 fbbe 	bl	8002668 <HAL_TIM_Base_Init>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000ef2:	f000 f913 	bl	800111c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000efa:	2300      	movs	r3, #0
 8000efc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000efe:	463b      	mov	r3, r7
 8000f00:	4619      	mov	r1, r3
 8000f02:	4806      	ldr	r0, [pc, #24]	; (8000f1c <MX_TIM6_Init+0x64>)
 8000f04:	f001 fd30 	bl	8002968 <HAL_TIMEx_MasterConfigSynchronization>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000f0e:	f000 f905 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000090 	.word	0x20000090
 8000f20:	40001000 	.word	0x40001000

08000f24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f28:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <MX_USART2_UART_Init+0x4c>)
 8000f2a:	4a12      	ldr	r2, [pc, #72]	; (8000f74 <MX_USART2_UART_Init+0x50>)
 8000f2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f2e:	4b10      	ldr	r3, [pc, #64]	; (8000f70 <MX_USART2_UART_Init+0x4c>)
 8000f30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f36:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <MX_USART2_UART_Init+0x4c>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <MX_USART2_UART_Init+0x4c>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f42:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <MX_USART2_UART_Init+0x4c>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f48:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <MX_USART2_UART_Init+0x4c>)
 8000f4a:	220c      	movs	r2, #12
 8000f4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f4e:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <MX_USART2_UART_Init+0x4c>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <MX_USART2_UART_Init+0x4c>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f5a:	4805      	ldr	r0, [pc, #20]	; (8000f70 <MX_USART2_UART_Init+0x4c>)
 8000f5c:	f001 fd80 	bl	8002a60 <HAL_UART_Init>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f66:	f000 f8d9 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	200000f0 	.word	0x200000f0
 8000f74:	40004400 	.word	0x40004400

08000f78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08a      	sub	sp, #40	; 0x28
 8000f7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7e:	f107 0314 	add.w	r3, r7, #20
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]
 8000f8a:	60da      	str	r2, [r3, #12]
 8000f8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	613b      	str	r3, [r7, #16]
 8000f92:	4b5e      	ldr	r3, [pc, #376]	; (800110c <MX_GPIO_Init+0x194>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a5d      	ldr	r2, [pc, #372]	; (800110c <MX_GPIO_Init+0x194>)
 8000f98:	f043 0304 	orr.w	r3, r3, #4
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9e:	4b5b      	ldr	r3, [pc, #364]	; (800110c <MX_GPIO_Init+0x194>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	f003 0304 	and.w	r3, r3, #4
 8000fa6:	613b      	str	r3, [r7, #16]
 8000fa8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	4b57      	ldr	r3, [pc, #348]	; (800110c <MX_GPIO_Init+0x194>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a56      	ldr	r2, [pc, #344]	; (800110c <MX_GPIO_Init+0x194>)
 8000fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b54      	ldr	r3, [pc, #336]	; (800110c <MX_GPIO_Init+0x194>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60bb      	str	r3, [r7, #8]
 8000fca:	4b50      	ldr	r3, [pc, #320]	; (800110c <MX_GPIO_Init+0x194>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a4f      	ldr	r2, [pc, #316]	; (800110c <MX_GPIO_Init+0x194>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b4d      	ldr	r3, [pc, #308]	; (800110c <MX_GPIO_Init+0x194>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	60bb      	str	r3, [r7, #8]
 8000fe0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	607b      	str	r3, [r7, #4]
 8000fe6:	4b49      	ldr	r3, [pc, #292]	; (800110c <MX_GPIO_Init+0x194>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a48      	ldr	r2, [pc, #288]	; (800110c <MX_GPIO_Init+0x194>)
 8000fec:	f043 0302 	orr.w	r3, r3, #2
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b46      	ldr	r3, [pc, #280]	; (800110c <MX_GPIO_Init+0x194>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f003 0302 	and.w	r3, r3, #2
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|LD2_Pin|GPIO_PIN_6
 8000ffe:	2200      	movs	r2, #0
 8001000:	f649 71f2 	movw	r1, #40946	; 0x9ff2
 8001004:	4842      	ldr	r0, [pc, #264]	; (8001110 <MX_GPIO_Init+0x198>)
 8001006:	f000 fd93 	bl	8001b30 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 800100a:	2200      	movs	r2, #0
 800100c:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8001010:	4840      	ldr	r0, [pc, #256]	; (8001114 <MX_GPIO_Init+0x19c>)
 8001012:	f000 fd8d 	bl	8001b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001016:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800101a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800101c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001020:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001026:	f107 0314 	add.w	r3, r7, #20
 800102a:	4619      	mov	r1, r3
 800102c:	4839      	ldr	r0, [pc, #228]	; (8001114 <MX_GPIO_Init+0x19c>)
 800102e:	f000 fbd3 	bl	80017d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001032:	23ff      	movs	r3, #255	; 0xff
 8001034:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001036:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800103a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800103c:	2301      	movs	r3, #1
 800103e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	4619      	mov	r1, r3
 8001046:	4833      	ldr	r0, [pc, #204]	; (8001114 <MX_GPIO_Init+0x19c>)
 8001048:	f000 fbc6 	bl	80017d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 LD2_Pin PA6
                           PA7 PA8 PA9 PA10
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|LD2_Pin|GPIO_PIN_6
 800104c:	f649 73f2 	movw	r3, #40946	; 0x9ff2
 8001050:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001052:	2301      	movs	r3, #1
 8001054:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105a:	2300      	movs	r3, #0
 800105c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105e:	f107 0314 	add.w	r3, r7, #20
 8001062:	4619      	mov	r1, r3
 8001064:	482a      	ldr	r0, [pc, #168]	; (8001110 <MX_GPIO_Init+0x198>)
 8001066:	f000 fbb7 	bl	80017d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800106a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800106e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001070:	2301      	movs	r3, #1
 8001072:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001078:	2300      	movs	r3, #0
 800107a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800107c:	f107 0314 	add.w	r3, r7, #20
 8001080:	4619      	mov	r1, r3
 8001082:	4824      	ldr	r0, [pc, #144]	; (8001114 <MX_GPIO_Init+0x19c>)
 8001084:	f000 fba8 	bl	80017d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001088:	f44f 7340 	mov.w	r3, #768	; 0x300
 800108c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800108e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001092:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001094:	2301      	movs	r3, #1
 8001096:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	4619      	mov	r1, r3
 800109e:	481e      	ldr	r0, [pc, #120]	; (8001118 <MX_GPIO_Init+0x1a0>)
 80010a0:	f000 fb9a 	bl	80017d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2100      	movs	r1, #0
 80010a8:	2006      	movs	r0, #6
 80010aa:	f000 facc 	bl	8001646 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80010ae:	2006      	movs	r0, #6
 80010b0:	f000 fae5 	bl	800167e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80010b4:	2200      	movs	r2, #0
 80010b6:	2100      	movs	r1, #0
 80010b8:	2007      	movs	r0, #7
 80010ba:	f000 fac4 	bl	8001646 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80010be:	2007      	movs	r0, #7
 80010c0:	f000 fadd 	bl	800167e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2100      	movs	r1, #0
 80010c8:	2008      	movs	r0, #8
 80010ca:	f000 fabc 	bl	8001646 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80010ce:	2008      	movs	r0, #8
 80010d0:	f000 fad5 	bl	800167e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80010d4:	2200      	movs	r2, #0
 80010d6:	2100      	movs	r1, #0
 80010d8:	2009      	movs	r0, #9
 80010da:	f000 fab4 	bl	8001646 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80010de:	2009      	movs	r0, #9
 80010e0:	f000 facd 	bl	800167e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2100      	movs	r1, #0
 80010e8:	200a      	movs	r0, #10
 80010ea:	f000 faac 	bl	8001646 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80010ee:	200a      	movs	r0, #10
 80010f0:	f000 fac5 	bl	800167e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80010f4:	2200      	movs	r2, #0
 80010f6:	2100      	movs	r1, #0
 80010f8:	2017      	movs	r0, #23
 80010fa:	f000 faa4 	bl	8001646 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010fe:	2017      	movs	r0, #23
 8001100:	f000 fabd 	bl	800167e <HAL_NVIC_EnableIRQ>

}
 8001104:	bf00      	nop
 8001106:	3728      	adds	r7, #40	; 0x28
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40023800 	.word	0x40023800
 8001110:	40020000 	.word	0x40020000
 8001114:	40020800 	.word	0x40020800
 8001118:	40020400 	.word	0x40020400

0800111c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001120:	b672      	cpsid	i
}
 8001122:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001124:	e7fe      	b.n	8001124 <Error_Handler+0x8>
	...

08001128 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	607b      	str	r3, [r7, #4]
 8001132:	4b10      	ldr	r3, [pc, #64]	; (8001174 <HAL_MspInit+0x4c>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001136:	4a0f      	ldr	r2, [pc, #60]	; (8001174 <HAL_MspInit+0x4c>)
 8001138:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800113c:	6453      	str	r3, [r2, #68]	; 0x44
 800113e:	4b0d      	ldr	r3, [pc, #52]	; (8001174 <HAL_MspInit+0x4c>)
 8001140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001142:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001146:	607b      	str	r3, [r7, #4]
 8001148:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	603b      	str	r3, [r7, #0]
 800114e:	4b09      	ldr	r3, [pc, #36]	; (8001174 <HAL_MspInit+0x4c>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	4a08      	ldr	r2, [pc, #32]	; (8001174 <HAL_MspInit+0x4c>)
 8001154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001158:	6413      	str	r3, [r2, #64]	; 0x40
 800115a:	4b06      	ldr	r3, [pc, #24]	; (8001174 <HAL_MspInit+0x4c>)
 800115c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001162:	603b      	str	r3, [r7, #0]
 8001164:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001166:	2007      	movs	r0, #7
 8001168:	f000 fa62 	bl	8001630 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40023800 	.word	0x40023800

08001178 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a0b      	ldr	r2, [pc, #44]	; (80011b4 <HAL_TIM_Base_MspInit+0x3c>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d10d      	bne.n	80011a6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <HAL_TIM_Base_MspInit+0x40>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	4a09      	ldr	r2, [pc, #36]	; (80011b8 <HAL_TIM_Base_MspInit+0x40>)
 8001194:	f043 0310 	orr.w	r3, r3, #16
 8001198:	6413      	str	r3, [r2, #64]	; 0x40
 800119a:	4b07      	ldr	r3, [pc, #28]	; (80011b8 <HAL_TIM_Base_MspInit+0x40>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119e:	f003 0310 	and.w	r3, r3, #16
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80011a6:	bf00      	nop
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	40001000 	.word	0x40001000
 80011b8:	40023800 	.word	0x40023800

080011bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08a      	sub	sp, #40	; 0x28
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a1d      	ldr	r2, [pc, #116]	; (8001250 <HAL_UART_MspInit+0x94>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d133      	bne.n	8001246 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	613b      	str	r3, [r7, #16]
 80011e2:	4b1c      	ldr	r3, [pc, #112]	; (8001254 <HAL_UART_MspInit+0x98>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	4a1b      	ldr	r2, [pc, #108]	; (8001254 <HAL_UART_MspInit+0x98>)
 80011e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011ec:	6413      	str	r3, [r2, #64]	; 0x40
 80011ee:	4b19      	ldr	r3, [pc, #100]	; (8001254 <HAL_UART_MspInit+0x98>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f6:	613b      	str	r3, [r7, #16]
 80011f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	4b15      	ldr	r3, [pc, #84]	; (8001254 <HAL_UART_MspInit+0x98>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	4a14      	ldr	r2, [pc, #80]	; (8001254 <HAL_UART_MspInit+0x98>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
 800120a:	4b12      	ldr	r3, [pc, #72]	; (8001254 <HAL_UART_MspInit+0x98>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001216:	230c      	movs	r3, #12
 8001218:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121a:	2302      	movs	r3, #2
 800121c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001222:	2303      	movs	r3, #3
 8001224:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001226:	2307      	movs	r3, #7
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122a:	f107 0314 	add.w	r3, r7, #20
 800122e:	4619      	mov	r1, r3
 8001230:	4809      	ldr	r0, [pc, #36]	; (8001258 <HAL_UART_MspInit+0x9c>)
 8001232:	f000 fad1 	bl	80017d8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001236:	2200      	movs	r2, #0
 8001238:	2100      	movs	r1, #0
 800123a:	2026      	movs	r0, #38	; 0x26
 800123c:	f000 fa03 	bl	8001646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001240:	2026      	movs	r0, #38	; 0x26
 8001242:	f000 fa1c 	bl	800167e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001246:	bf00      	nop
 8001248:	3728      	adds	r7, #40	; 0x28
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40004400 	.word	0x40004400
 8001254:	40023800 	.word	0x40023800
 8001258:	40020000 	.word	0x40020000

0800125c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001260:	e7fe      	b.n	8001260 <NMI_Handler+0x4>

08001262 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001266:	e7fe      	b.n	8001266 <HardFault_Handler+0x4>

08001268 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800126c:	e7fe      	b.n	800126c <MemManage_Handler+0x4>

0800126e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001272:	e7fe      	b.n	8001272 <BusFault_Handler+0x4>

08001274 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001278:	e7fe      	b.n	8001278 <UsageFault_Handler+0x4>

0800127a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr

08001296 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012a8:	f000 f8d2 	bl	8001450 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ac:	bf00      	nop
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80012b4:	2001      	movs	r0, #1
 80012b6:	f000 fc55 	bl	8001b64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}

080012be <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80012c2:	2002      	movs	r0, #2
 80012c4:	f000 fc4e 	bl	8001b64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}

080012cc <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USART_TX_Pin);
 80012d0:	2004      	movs	r0, #4
 80012d2:	f000 fc47 	bl	8001b64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}

080012da <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USART_RX_Pin);
 80012de:	2008      	movs	r0, #8
 80012e0:	f000 fc40 	bl	8001b64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80012e4:	bf00      	nop
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80012ec:	2010      	movs	r0, #16
 80012ee:	f000 fc39 	bl	8001b64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LD2_Pin);
 80012fa:	2020      	movs	r0, #32
 80012fc:	f000 fc32 	bl	8001b64 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001300:	2040      	movs	r0, #64	; 0x40
 8001302:	f000 fc2f 	bl	8001b64 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001306:	2080      	movs	r0, #128	; 0x80
 8001308:	f000 fc2c 	bl	8001b64 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800130c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001310:	f000 fc28 	bl	8001b64 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001314:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001318:	f000 fc24 	bl	8001b64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800131c:	bf00      	nop
 800131e:	bd80      	pop	{r7, pc}

08001320 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001324:	4802      	ldr	r0, [pc, #8]	; (8001330 <USART2_IRQHandler+0x10>)
 8001326:	f001 fd4d 	bl	8002dc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	200000f0 	.word	0x200000f0

08001334 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001338:	4b06      	ldr	r3, [pc, #24]	; (8001354 <SystemInit+0x20>)
 800133a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800133e:	4a05      	ldr	r2, [pc, #20]	; (8001354 <SystemInit+0x20>)
 8001340:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001344:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001358:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001390 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800135c:	480d      	ldr	r0, [pc, #52]	; (8001394 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800135e:	490e      	ldr	r1, [pc, #56]	; (8001398 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001360:	4a0e      	ldr	r2, [pc, #56]	; (800139c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001362:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001364:	e002      	b.n	800136c <LoopCopyDataInit>

08001366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800136a:	3304      	adds	r3, #4

0800136c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800136c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800136e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001370:	d3f9      	bcc.n	8001366 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001372:	4a0b      	ldr	r2, [pc, #44]	; (80013a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001374:	4c0b      	ldr	r4, [pc, #44]	; (80013a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001378:	e001      	b.n	800137e <LoopFillZerobss>

0800137a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800137a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800137c:	3204      	adds	r2, #4

0800137e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800137e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001380:	d3fb      	bcc.n	800137a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001382:	f7ff ffd7 	bl	8001334 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001386:	f002 fbd5 	bl	8003b34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800138a:	f7ff fa8d 	bl	80008a8 <main>
  bx  lr    
 800138e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001390:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001394:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001398:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800139c:	08003be8 	.word	0x08003be8
  ldr r2, =_sbss
 80013a0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80013a4:	20000168 	.word	0x20000168

080013a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013a8:	e7fe      	b.n	80013a8 <ADC_IRQHandler>
	...

080013ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013b0:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <HAL_Init+0x40>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a0d      	ldr	r2, [pc, #52]	; (80013ec <HAL_Init+0x40>)
 80013b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013bc:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <HAL_Init+0x40>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a0a      	ldr	r2, [pc, #40]	; (80013ec <HAL_Init+0x40>)
 80013c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013c8:	4b08      	ldr	r3, [pc, #32]	; (80013ec <HAL_Init+0x40>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a07      	ldr	r2, [pc, #28]	; (80013ec <HAL_Init+0x40>)
 80013ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d4:	2003      	movs	r0, #3
 80013d6:	f000 f92b 	bl	8001630 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013da:	2000      	movs	r0, #0
 80013dc:	f000 f808 	bl	80013f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013e0:	f7ff fea2 	bl	8001128 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40023c00 	.word	0x40023c00

080013f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013f8:	4b12      	ldr	r3, [pc, #72]	; (8001444 <HAL_InitTick+0x54>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	4b12      	ldr	r3, [pc, #72]	; (8001448 <HAL_InitTick+0x58>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	4619      	mov	r1, r3
 8001402:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001406:	fbb3 f3f1 	udiv	r3, r3, r1
 800140a:	fbb2 f3f3 	udiv	r3, r2, r3
 800140e:	4618      	mov	r0, r3
 8001410:	f000 f943 	bl	800169a <HAL_SYSTICK_Config>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e00e      	b.n	800143c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2b0f      	cmp	r3, #15
 8001422:	d80a      	bhi.n	800143a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001424:	2200      	movs	r2, #0
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	f04f 30ff 	mov.w	r0, #4294967295
 800142c:	f000 f90b 	bl	8001646 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001430:	4a06      	ldr	r2, [pc, #24]	; (800144c <HAL_InitTick+0x5c>)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001436:	2300      	movs	r3, #0
 8001438:	e000      	b.n	800143c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
}
 800143c:	4618      	mov	r0, r3
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000000 	.word	0x20000000
 8001448:	20000008 	.word	0x20000008
 800144c:	20000004 	.word	0x20000004

08001450 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001454:	4b06      	ldr	r3, [pc, #24]	; (8001470 <HAL_IncTick+0x20>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	461a      	mov	r2, r3
 800145a:	4b06      	ldr	r3, [pc, #24]	; (8001474 <HAL_IncTick+0x24>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4413      	add	r3, r2
 8001460:	4a04      	ldr	r2, [pc, #16]	; (8001474 <HAL_IncTick+0x24>)
 8001462:	6013      	str	r3, [r2, #0]
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	20000008 	.word	0x20000008
 8001474:	20000164 	.word	0x20000164

08001478 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  return uwTick;
 800147c:	4b03      	ldr	r3, [pc, #12]	; (800148c <HAL_GetTick+0x14>)
 800147e:	681b      	ldr	r3, [r3, #0]
}
 8001480:	4618      	mov	r0, r3
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	20000164 	.word	0x20000164

08001490 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f003 0307 	and.w	r3, r3, #7
 800149e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014a0:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <__NVIC_SetPriorityGrouping+0x44>)
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014a6:	68ba      	ldr	r2, [r7, #8]
 80014a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014ac:	4013      	ands	r3, r2
 80014ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014c2:	4a04      	ldr	r2, [pc, #16]	; (80014d4 <__NVIC_SetPriorityGrouping+0x44>)
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	60d3      	str	r3, [r2, #12]
}
 80014c8:	bf00      	nop
 80014ca:	3714      	adds	r7, #20
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	e000ed00 	.word	0xe000ed00

080014d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014dc:	4b04      	ldr	r3, [pc, #16]	; (80014f0 <__NVIC_GetPriorityGrouping+0x18>)
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	0a1b      	lsrs	r3, r3, #8
 80014e2:	f003 0307 	and.w	r3, r3, #7
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001502:	2b00      	cmp	r3, #0
 8001504:	db0b      	blt.n	800151e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	f003 021f 	and.w	r2, r3, #31
 800150c:	4907      	ldr	r1, [pc, #28]	; (800152c <__NVIC_EnableIRQ+0x38>)
 800150e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001512:	095b      	lsrs	r3, r3, #5
 8001514:	2001      	movs	r0, #1
 8001516:	fa00 f202 	lsl.w	r2, r0, r2
 800151a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800151e:	bf00      	nop
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	e000e100 	.word	0xe000e100

08001530 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	6039      	str	r1, [r7, #0]
 800153a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800153c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001540:	2b00      	cmp	r3, #0
 8001542:	db0a      	blt.n	800155a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	b2da      	uxtb	r2, r3
 8001548:	490c      	ldr	r1, [pc, #48]	; (800157c <__NVIC_SetPriority+0x4c>)
 800154a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154e:	0112      	lsls	r2, r2, #4
 8001550:	b2d2      	uxtb	r2, r2
 8001552:	440b      	add	r3, r1
 8001554:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001558:	e00a      	b.n	8001570 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	b2da      	uxtb	r2, r3
 800155e:	4908      	ldr	r1, [pc, #32]	; (8001580 <__NVIC_SetPriority+0x50>)
 8001560:	79fb      	ldrb	r3, [r7, #7]
 8001562:	f003 030f 	and.w	r3, r3, #15
 8001566:	3b04      	subs	r3, #4
 8001568:	0112      	lsls	r2, r2, #4
 800156a:	b2d2      	uxtb	r2, r2
 800156c:	440b      	add	r3, r1
 800156e:	761a      	strb	r2, [r3, #24]
}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	e000e100 	.word	0xe000e100
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001584:	b480      	push	{r7}
 8001586:	b089      	sub	sp, #36	; 0x24
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	f1c3 0307 	rsb	r3, r3, #7
 800159e:	2b04      	cmp	r3, #4
 80015a0:	bf28      	it	cs
 80015a2:	2304      	movcs	r3, #4
 80015a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	3304      	adds	r3, #4
 80015aa:	2b06      	cmp	r3, #6
 80015ac:	d902      	bls.n	80015b4 <NVIC_EncodePriority+0x30>
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	3b03      	subs	r3, #3
 80015b2:	e000      	b.n	80015b6 <NVIC_EncodePriority+0x32>
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b8:	f04f 32ff 	mov.w	r2, #4294967295
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	43da      	mvns	r2, r3
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	401a      	ands	r2, r3
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015cc:	f04f 31ff 	mov.w	r1, #4294967295
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	fa01 f303 	lsl.w	r3, r1, r3
 80015d6:	43d9      	mvns	r1, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015dc:	4313      	orrs	r3, r2
         );
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3724      	adds	r7, #36	; 0x24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
	...

080015ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3b01      	subs	r3, #1
 80015f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015fc:	d301      	bcc.n	8001602 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015fe:	2301      	movs	r3, #1
 8001600:	e00f      	b.n	8001622 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001602:	4a0a      	ldr	r2, [pc, #40]	; (800162c <SysTick_Config+0x40>)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3b01      	subs	r3, #1
 8001608:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800160a:	210f      	movs	r1, #15
 800160c:	f04f 30ff 	mov.w	r0, #4294967295
 8001610:	f7ff ff8e 	bl	8001530 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001614:	4b05      	ldr	r3, [pc, #20]	; (800162c <SysTick_Config+0x40>)
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800161a:	4b04      	ldr	r3, [pc, #16]	; (800162c <SysTick_Config+0x40>)
 800161c:	2207      	movs	r2, #7
 800161e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	e000e010 	.word	0xe000e010

08001630 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f7ff ff29 	bl	8001490 <__NVIC_SetPriorityGrouping>
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001646:	b580      	push	{r7, lr}
 8001648:	b086      	sub	sp, #24
 800164a:	af00      	add	r7, sp, #0
 800164c:	4603      	mov	r3, r0
 800164e:	60b9      	str	r1, [r7, #8]
 8001650:	607a      	str	r2, [r7, #4]
 8001652:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001658:	f7ff ff3e 	bl	80014d8 <__NVIC_GetPriorityGrouping>
 800165c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	68b9      	ldr	r1, [r7, #8]
 8001662:	6978      	ldr	r0, [r7, #20]
 8001664:	f7ff ff8e 	bl	8001584 <NVIC_EncodePriority>
 8001668:	4602      	mov	r2, r0
 800166a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800166e:	4611      	mov	r1, r2
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff ff5d 	bl	8001530 <__NVIC_SetPriority>
}
 8001676:	bf00      	nop
 8001678:	3718      	adds	r7, #24
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b082      	sub	sp, #8
 8001682:	af00      	add	r7, sp, #0
 8001684:	4603      	mov	r3, r0
 8001686:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff ff31 	bl	80014f4 <__NVIC_EnableIRQ>
}
 8001692:	bf00      	nop
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b082      	sub	sp, #8
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f7ff ffa2 	bl	80015ec <SysTick_Config>
 80016a8:	4603      	mov	r3, r0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b084      	sub	sp, #16
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016be:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80016c0:	f7ff feda 	bl	8001478 <HAL_GetTick>
 80016c4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d008      	beq.n	80016e4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2280      	movs	r2, #128	; 0x80
 80016d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e052      	b.n	800178a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f022 0216 	bic.w	r2, r2, #22
 80016f2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	695a      	ldr	r2, [r3, #20]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001702:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001708:	2b00      	cmp	r3, #0
 800170a:	d103      	bne.n	8001714 <HAL_DMA_Abort+0x62>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001710:	2b00      	cmp	r3, #0
 8001712:	d007      	beq.n	8001724 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f022 0208 	bic.w	r2, r2, #8
 8001722:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f022 0201 	bic.w	r2, r2, #1
 8001732:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001734:	e013      	b.n	800175e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001736:	f7ff fe9f 	bl	8001478 <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b05      	cmp	r3, #5
 8001742:	d90c      	bls.n	800175e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2220      	movs	r2, #32
 8001748:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2203      	movs	r2, #3
 800174e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e015      	b.n	800178a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0301 	and.w	r3, r3, #1
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1e4      	bne.n	8001736 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001770:	223f      	movs	r2, #63	; 0x3f
 8001772:	409a      	lsls	r2, r3
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2201      	movs	r2, #1
 800177c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001792:	b480      	push	{r7}
 8001794:	b083      	sub	sp, #12
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d004      	beq.n	80017b0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2280      	movs	r2, #128	; 0x80
 80017aa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e00c      	b.n	80017ca <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2205      	movs	r2, #5
 80017b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f022 0201 	bic.w	r2, r2, #1
 80017c6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
	...

080017d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d8:	b480      	push	{r7}
 80017da:	b089      	sub	sp, #36	; 0x24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017e2:	2300      	movs	r3, #0
 80017e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017e6:	2300      	movs	r3, #0
 80017e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ee:	2300      	movs	r3, #0
 80017f0:	61fb      	str	r3, [r7, #28]
 80017f2:	e165      	b.n	8001ac0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017f4:	2201      	movs	r2, #1
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	697a      	ldr	r2, [r7, #20]
 8001804:	4013      	ands	r3, r2
 8001806:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	429a      	cmp	r2, r3
 800180e:	f040 8154 	bne.w	8001aba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f003 0303 	and.w	r3, r3, #3
 800181a:	2b01      	cmp	r3, #1
 800181c:	d005      	beq.n	800182a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001826:	2b02      	cmp	r3, #2
 8001828:	d130      	bne.n	800188c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	2203      	movs	r2, #3
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43db      	mvns	r3, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4013      	ands	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	68da      	ldr	r2, [r3, #12]
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	4313      	orrs	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001860:	2201      	movs	r2, #1
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4013      	ands	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	091b      	lsrs	r3, r3, #4
 8001876:	f003 0201 	and.w	r2, r3, #1
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4313      	orrs	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f003 0303 	and.w	r3, r3, #3
 8001894:	2b03      	cmp	r3, #3
 8001896:	d017      	beq.n	80018c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	2203      	movs	r2, #3
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	43db      	mvns	r3, r3
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	4013      	ands	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	4313      	orrs	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f003 0303 	and.w	r3, r3, #3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d123      	bne.n	800191c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	08da      	lsrs	r2, r3, #3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3208      	adds	r2, #8
 80018dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	f003 0307 	and.w	r3, r3, #7
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	220f      	movs	r2, #15
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	43db      	mvns	r3, r3
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4013      	ands	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	691a      	ldr	r2, [r3, #16]
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	4313      	orrs	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	08da      	lsrs	r2, r3, #3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	3208      	adds	r2, #8
 8001916:	69b9      	ldr	r1, [r7, #24]
 8001918:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	2203      	movs	r2, #3
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	43db      	mvns	r3, r3
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	4013      	ands	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 0203 	and.w	r2, r3, #3
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4313      	orrs	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001958:	2b00      	cmp	r3, #0
 800195a:	f000 80ae 	beq.w	8001aba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	4b5d      	ldr	r3, [pc, #372]	; (8001ad8 <HAL_GPIO_Init+0x300>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001966:	4a5c      	ldr	r2, [pc, #368]	; (8001ad8 <HAL_GPIO_Init+0x300>)
 8001968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800196c:	6453      	str	r3, [r2, #68]	; 0x44
 800196e:	4b5a      	ldr	r3, [pc, #360]	; (8001ad8 <HAL_GPIO_Init+0x300>)
 8001970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800197a:	4a58      	ldr	r2, [pc, #352]	; (8001adc <HAL_GPIO_Init+0x304>)
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	089b      	lsrs	r3, r3, #2
 8001980:	3302      	adds	r3, #2
 8001982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001986:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f003 0303 	and.w	r3, r3, #3
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	220f      	movs	r2, #15
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	43db      	mvns	r3, r3
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4013      	ands	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a4f      	ldr	r2, [pc, #316]	; (8001ae0 <HAL_GPIO_Init+0x308>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d025      	beq.n	80019f2 <HAL_GPIO_Init+0x21a>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a4e      	ldr	r2, [pc, #312]	; (8001ae4 <HAL_GPIO_Init+0x30c>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d01f      	beq.n	80019ee <HAL_GPIO_Init+0x216>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a4d      	ldr	r2, [pc, #308]	; (8001ae8 <HAL_GPIO_Init+0x310>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d019      	beq.n	80019ea <HAL_GPIO_Init+0x212>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a4c      	ldr	r2, [pc, #304]	; (8001aec <HAL_GPIO_Init+0x314>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d013      	beq.n	80019e6 <HAL_GPIO_Init+0x20e>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a4b      	ldr	r2, [pc, #300]	; (8001af0 <HAL_GPIO_Init+0x318>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d00d      	beq.n	80019e2 <HAL_GPIO_Init+0x20a>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a4a      	ldr	r2, [pc, #296]	; (8001af4 <HAL_GPIO_Init+0x31c>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d007      	beq.n	80019de <HAL_GPIO_Init+0x206>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a49      	ldr	r2, [pc, #292]	; (8001af8 <HAL_GPIO_Init+0x320>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d101      	bne.n	80019da <HAL_GPIO_Init+0x202>
 80019d6:	2306      	movs	r3, #6
 80019d8:	e00c      	b.n	80019f4 <HAL_GPIO_Init+0x21c>
 80019da:	2307      	movs	r3, #7
 80019dc:	e00a      	b.n	80019f4 <HAL_GPIO_Init+0x21c>
 80019de:	2305      	movs	r3, #5
 80019e0:	e008      	b.n	80019f4 <HAL_GPIO_Init+0x21c>
 80019e2:	2304      	movs	r3, #4
 80019e4:	e006      	b.n	80019f4 <HAL_GPIO_Init+0x21c>
 80019e6:	2303      	movs	r3, #3
 80019e8:	e004      	b.n	80019f4 <HAL_GPIO_Init+0x21c>
 80019ea:	2302      	movs	r3, #2
 80019ec:	e002      	b.n	80019f4 <HAL_GPIO_Init+0x21c>
 80019ee:	2301      	movs	r3, #1
 80019f0:	e000      	b.n	80019f4 <HAL_GPIO_Init+0x21c>
 80019f2:	2300      	movs	r3, #0
 80019f4:	69fa      	ldr	r2, [r7, #28]
 80019f6:	f002 0203 	and.w	r2, r2, #3
 80019fa:	0092      	lsls	r2, r2, #2
 80019fc:	4093      	lsls	r3, r2
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a04:	4935      	ldr	r1, [pc, #212]	; (8001adc <HAL_GPIO_Init+0x304>)
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	089b      	lsrs	r3, r3, #2
 8001a0a:	3302      	adds	r3, #2
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a12:	4b3a      	ldr	r3, [pc, #232]	; (8001afc <HAL_GPIO_Init+0x324>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a36:	4a31      	ldr	r2, [pc, #196]	; (8001afc <HAL_GPIO_Init+0x324>)
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a3c:	4b2f      	ldr	r3, [pc, #188]	; (8001afc <HAL_GPIO_Init+0x324>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	43db      	mvns	r3, r3
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d003      	beq.n	8001a60 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a60:	4a26      	ldr	r2, [pc, #152]	; (8001afc <HAL_GPIO_Init+0x324>)
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a66:	4b25      	ldr	r3, [pc, #148]	; (8001afc <HAL_GPIO_Init+0x324>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4013      	ands	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d003      	beq.n	8001a8a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a8a:	4a1c      	ldr	r2, [pc, #112]	; (8001afc <HAL_GPIO_Init+0x324>)
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a90:	4b1a      	ldr	r3, [pc, #104]	; (8001afc <HAL_GPIO_Init+0x324>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d003      	beq.n	8001ab4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ab4:	4a11      	ldr	r2, [pc, #68]	; (8001afc <HAL_GPIO_Init+0x324>)
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	3301      	adds	r3, #1
 8001abe:	61fb      	str	r3, [r7, #28]
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	2b0f      	cmp	r3, #15
 8001ac4:	f67f ae96 	bls.w	80017f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ac8:	bf00      	nop
 8001aca:	bf00      	nop
 8001acc:	3724      	adds	r7, #36	; 0x24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	40013800 	.word	0x40013800
 8001ae0:	40020000 	.word	0x40020000
 8001ae4:	40020400 	.word	0x40020400
 8001ae8:	40020800 	.word	0x40020800
 8001aec:	40020c00 	.word	0x40020c00
 8001af0:	40021000 	.word	0x40021000
 8001af4:	40021400 	.word	0x40021400
 8001af8:	40021800 	.word	0x40021800
 8001afc:	40013c00 	.word	0x40013c00

08001b00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	460b      	mov	r3, r1
 8001b0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	691a      	ldr	r2, [r3, #16]
 8001b10:	887b      	ldrh	r3, [r7, #2]
 8001b12:	4013      	ands	r3, r2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d002      	beq.n	8001b1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	73fb      	strb	r3, [r7, #15]
 8001b1c:	e001      	b.n	8001b22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3714      	adds	r7, #20
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	460b      	mov	r3, r1
 8001b3a:	807b      	strh	r3, [r7, #2]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b40:	787b      	ldrb	r3, [r7, #1]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d003      	beq.n	8001b4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b46:	887a      	ldrh	r2, [r7, #2]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b4c:	e003      	b.n	8001b56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b4e:	887b      	ldrh	r3, [r7, #2]
 8001b50:	041a      	lsls	r2, r3, #16
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	619a      	str	r2, [r3, #24]
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
	...

08001b64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001b6e:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b70:	695a      	ldr	r2, [r3, #20]
 8001b72:	88fb      	ldrh	r3, [r7, #6]
 8001b74:	4013      	ands	r3, r2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d006      	beq.n	8001b88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b7a:	4a05      	ldr	r2, [pc, #20]	; (8001b90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b7c:	88fb      	ldrh	r3, [r7, #6]
 8001b7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b80:	88fb      	ldrh	r3, [r7, #6]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7fe fcf4 	bl	8000570 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b88:	bf00      	nop
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40013c00 	.word	0x40013c00

08001b94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d101      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e0cc      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ba8:	4b68      	ldr	r3, [pc, #416]	; (8001d4c <HAL_RCC_ClockConfig+0x1b8>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 030f 	and.w	r3, r3, #15
 8001bb0:	683a      	ldr	r2, [r7, #0]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d90c      	bls.n	8001bd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb6:	4b65      	ldr	r3, [pc, #404]	; (8001d4c <HAL_RCC_ClockConfig+0x1b8>)
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	b2d2      	uxtb	r2, r2
 8001bbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bbe:	4b63      	ldr	r3, [pc, #396]	; (8001d4c <HAL_RCC_ClockConfig+0x1b8>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 030f 	and.w	r3, r3, #15
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d001      	beq.n	8001bd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e0b8      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d020      	beq.n	8001c1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0304 	and.w	r3, r3, #4
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d005      	beq.n	8001bf4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001be8:	4b59      	ldr	r3, [pc, #356]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	4a58      	ldr	r2, [pc, #352]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001bee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001bf2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0308 	and.w	r3, r3, #8
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d005      	beq.n	8001c0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c00:	4b53      	ldr	r3, [pc, #332]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	4a52      	ldr	r2, [pc, #328]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c0c:	4b50      	ldr	r3, [pc, #320]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	494d      	ldr	r1, [pc, #308]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d044      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d107      	bne.n	8001c42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c32:	4b47      	ldr	r3, [pc, #284]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d119      	bne.n	8001c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e07f      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d003      	beq.n	8001c52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c4e:	2b03      	cmp	r3, #3
 8001c50:	d107      	bne.n	8001c62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c52:	4b3f      	ldr	r3, [pc, #252]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d109      	bne.n	8001c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e06f      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c62:	4b3b      	ldr	r3, [pc, #236]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e067      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c72:	4b37      	ldr	r3, [pc, #220]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f023 0203 	bic.w	r2, r3, #3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	4934      	ldr	r1, [pc, #208]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c84:	f7ff fbf8 	bl	8001478 <HAL_GetTick>
 8001c88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c8a:	e00a      	b.n	8001ca2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c8c:	f7ff fbf4 	bl	8001478 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e04f      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ca2:	4b2b      	ldr	r3, [pc, #172]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f003 020c 	and.w	r2, r3, #12
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d1eb      	bne.n	8001c8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cb4:	4b25      	ldr	r3, [pc, #148]	; (8001d4c <HAL_RCC_ClockConfig+0x1b8>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 030f 	and.w	r3, r3, #15
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d20c      	bcs.n	8001cdc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc2:	4b22      	ldr	r3, [pc, #136]	; (8001d4c <HAL_RCC_ClockConfig+0x1b8>)
 8001cc4:	683a      	ldr	r2, [r7, #0]
 8001cc6:	b2d2      	uxtb	r2, r2
 8001cc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cca:	4b20      	ldr	r3, [pc, #128]	; (8001d4c <HAL_RCC_ClockConfig+0x1b8>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 030f 	and.w	r3, r3, #15
 8001cd2:	683a      	ldr	r2, [r7, #0]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d001      	beq.n	8001cdc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e032      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d008      	beq.n	8001cfa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ce8:	4b19      	ldr	r3, [pc, #100]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	4916      	ldr	r1, [pc, #88]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0308 	and.w	r3, r3, #8
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d009      	beq.n	8001d1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d06:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	490e      	ldr	r1, [pc, #56]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d1a:	f000 f855 	bl	8001dc8 <HAL_RCC_GetSysClockFreq>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	091b      	lsrs	r3, r3, #4
 8001d26:	f003 030f 	and.w	r3, r3, #15
 8001d2a:	490a      	ldr	r1, [pc, #40]	; (8001d54 <HAL_RCC_ClockConfig+0x1c0>)
 8001d2c:	5ccb      	ldrb	r3, [r1, r3]
 8001d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d32:	4a09      	ldr	r2, [pc, #36]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001d34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d36:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <HAL_RCC_ClockConfig+0x1c8>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff fb58 	bl	80013f0 <HAL_InitTick>

  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40023c00 	.word	0x40023c00
 8001d50:	40023800 	.word	0x40023800
 8001d54:	08003bc0 	.word	0x08003bc0
 8001d58:	20000000 	.word	0x20000000
 8001d5c:	20000004 	.word	0x20000004

08001d60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d64:	4b03      	ldr	r3, [pc, #12]	; (8001d74 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d66:	681b      	ldr	r3, [r3, #0]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	20000000 	.word	0x20000000

08001d78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d7c:	f7ff fff0 	bl	8001d60 <HAL_RCC_GetHCLKFreq>
 8001d80:	4602      	mov	r2, r0
 8001d82:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	0a9b      	lsrs	r3, r3, #10
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	4903      	ldr	r1, [pc, #12]	; (8001d9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d8e:	5ccb      	ldrb	r3, [r1, r3]
 8001d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	08003bd0 	.word	0x08003bd0

08001da0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001da4:	f7ff ffdc 	bl	8001d60 <HAL_RCC_GetHCLKFreq>
 8001da8:	4602      	mov	r2, r0
 8001daa:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	0b5b      	lsrs	r3, r3, #13
 8001db0:	f003 0307 	and.w	r3, r3, #7
 8001db4:	4903      	ldr	r1, [pc, #12]	; (8001dc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001db6:	5ccb      	ldrb	r3, [r1, r3]
 8001db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	08003bd0 	.word	0x08003bd0

08001dc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dcc:	b088      	sub	sp, #32
 8001dce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8001de0:	2300      	movs	r3, #0
 8001de2:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001de4:	4bce      	ldr	r3, [pc, #824]	; (8002120 <HAL_RCC_GetSysClockFreq+0x358>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f003 030c 	and.w	r3, r3, #12
 8001dec:	2b0c      	cmp	r3, #12
 8001dee:	f200 818d 	bhi.w	800210c <HAL_RCC_GetSysClockFreq+0x344>
 8001df2:	a201      	add	r2, pc, #4	; (adr r2, 8001df8 <HAL_RCC_GetSysClockFreq+0x30>)
 8001df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df8:	08001e2d 	.word	0x08001e2d
 8001dfc:	0800210d 	.word	0x0800210d
 8001e00:	0800210d 	.word	0x0800210d
 8001e04:	0800210d 	.word	0x0800210d
 8001e08:	08001e33 	.word	0x08001e33
 8001e0c:	0800210d 	.word	0x0800210d
 8001e10:	0800210d 	.word	0x0800210d
 8001e14:	0800210d 	.word	0x0800210d
 8001e18:	08001e39 	.word	0x08001e39
 8001e1c:	0800210d 	.word	0x0800210d
 8001e20:	0800210d 	.word	0x0800210d
 8001e24:	0800210d 	.word	0x0800210d
 8001e28:	08001fad 	.word	0x08001fad
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e2c:	4bbd      	ldr	r3, [pc, #756]	; (8002124 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001e2e:	61bb      	str	r3, [r7, #24]
       break;
 8001e30:	e16f      	b.n	8002112 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e32:	4bbd      	ldr	r3, [pc, #756]	; (8002128 <HAL_RCC_GetSysClockFreq+0x360>)
 8001e34:	61bb      	str	r3, [r7, #24]
      break;
 8001e36:	e16c      	b.n	8002112 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e38:	4bb9      	ldr	r3, [pc, #740]	; (8002120 <HAL_RCC_GetSysClockFreq+0x358>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e40:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e42:	4bb7      	ldr	r3, [pc, #732]	; (8002120 <HAL_RCC_GetSysClockFreq+0x358>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d053      	beq.n	8001ef6 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e4e:	4bb4      	ldr	r3, [pc, #720]	; (8002120 <HAL_RCC_GetSysClockFreq+0x358>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	099b      	lsrs	r3, r3, #6
 8001e54:	461a      	mov	r2, r3
 8001e56:	f04f 0300 	mov.w	r3, #0
 8001e5a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001e5e:	f04f 0100 	mov.w	r1, #0
 8001e62:	ea02 0400 	and.w	r4, r2, r0
 8001e66:	603c      	str	r4, [r7, #0]
 8001e68:	400b      	ands	r3, r1
 8001e6a:	607b      	str	r3, [r7, #4]
 8001e6c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e70:	4620      	mov	r0, r4
 8001e72:	4629      	mov	r1, r5
 8001e74:	f04f 0200 	mov.w	r2, #0
 8001e78:	f04f 0300 	mov.w	r3, #0
 8001e7c:	014b      	lsls	r3, r1, #5
 8001e7e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e82:	0142      	lsls	r2, r0, #5
 8001e84:	4610      	mov	r0, r2
 8001e86:	4619      	mov	r1, r3
 8001e88:	4623      	mov	r3, r4
 8001e8a:	1ac0      	subs	r0, r0, r3
 8001e8c:	462b      	mov	r3, r5
 8001e8e:	eb61 0103 	sbc.w	r1, r1, r3
 8001e92:	f04f 0200 	mov.w	r2, #0
 8001e96:	f04f 0300 	mov.w	r3, #0
 8001e9a:	018b      	lsls	r3, r1, #6
 8001e9c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ea0:	0182      	lsls	r2, r0, #6
 8001ea2:	1a12      	subs	r2, r2, r0
 8001ea4:	eb63 0301 	sbc.w	r3, r3, r1
 8001ea8:	f04f 0000 	mov.w	r0, #0
 8001eac:	f04f 0100 	mov.w	r1, #0
 8001eb0:	00d9      	lsls	r1, r3, #3
 8001eb2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001eb6:	00d0      	lsls	r0, r2, #3
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
 8001ebc:	4621      	mov	r1, r4
 8001ebe:	1852      	adds	r2, r2, r1
 8001ec0:	4629      	mov	r1, r5
 8001ec2:	eb43 0101 	adc.w	r1, r3, r1
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	f04f 0000 	mov.w	r0, #0
 8001ecc:	f04f 0100 	mov.w	r1, #0
 8001ed0:	0259      	lsls	r1, r3, #9
 8001ed2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001ed6:	0250      	lsls	r0, r2, #9
 8001ed8:	4602      	mov	r2, r0
 8001eda:	460b      	mov	r3, r1
 8001edc:	4610      	mov	r0, r2
 8001ede:	4619      	mov	r1, r3
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	f04f 0300 	mov.w	r3, #0
 8001ee8:	f7fe f98c 	bl	8000204 <__aeabi_uldivmod>
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	61fb      	str	r3, [r7, #28]
 8001ef4:	e04c      	b.n	8001f90 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ef6:	4b8a      	ldr	r3, [pc, #552]	; (8002120 <HAL_RCC_GetSysClockFreq+0x358>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	099b      	lsrs	r3, r3, #6
 8001efc:	461a      	mov	r2, r3
 8001efe:	f04f 0300 	mov.w	r3, #0
 8001f02:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001f06:	f04f 0100 	mov.w	r1, #0
 8001f0a:	ea02 0a00 	and.w	sl, r2, r0
 8001f0e:	ea03 0b01 	and.w	fp, r3, r1
 8001f12:	4650      	mov	r0, sl
 8001f14:	4659      	mov	r1, fp
 8001f16:	f04f 0200 	mov.w	r2, #0
 8001f1a:	f04f 0300 	mov.w	r3, #0
 8001f1e:	014b      	lsls	r3, r1, #5
 8001f20:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001f24:	0142      	lsls	r2, r0, #5
 8001f26:	4610      	mov	r0, r2
 8001f28:	4619      	mov	r1, r3
 8001f2a:	ebb0 000a 	subs.w	r0, r0, sl
 8001f2e:	eb61 010b 	sbc.w	r1, r1, fp
 8001f32:	f04f 0200 	mov.w	r2, #0
 8001f36:	f04f 0300 	mov.w	r3, #0
 8001f3a:	018b      	lsls	r3, r1, #6
 8001f3c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001f40:	0182      	lsls	r2, r0, #6
 8001f42:	1a12      	subs	r2, r2, r0
 8001f44:	eb63 0301 	sbc.w	r3, r3, r1
 8001f48:	f04f 0000 	mov.w	r0, #0
 8001f4c:	f04f 0100 	mov.w	r1, #0
 8001f50:	00d9      	lsls	r1, r3, #3
 8001f52:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f56:	00d0      	lsls	r0, r2, #3
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	eb12 020a 	adds.w	r2, r2, sl
 8001f60:	eb43 030b 	adc.w	r3, r3, fp
 8001f64:	f04f 0000 	mov.w	r0, #0
 8001f68:	f04f 0100 	mov.w	r1, #0
 8001f6c:	0299      	lsls	r1, r3, #10
 8001f6e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001f72:	0290      	lsls	r0, r2, #10
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	4610      	mov	r0, r2
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	461a      	mov	r2, r3
 8001f80:	f04f 0300 	mov.w	r3, #0
 8001f84:	f7fe f93e 	bl	8000204 <__aeabi_uldivmod>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f90:	4b63      	ldr	r3, [pc, #396]	; (8002120 <HAL_RCC_GetSysClockFreq+0x358>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	0c1b      	lsrs	r3, r3, #16
 8001f96:	f003 0303 	and.w	r3, r3, #3
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8001fa0:	69fa      	ldr	r2, [r7, #28]
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa8:	61bb      	str	r3, [r7, #24]
      break;
 8001faa:	e0b2      	b.n	8002112 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fac:	4b5c      	ldr	r3, [pc, #368]	; (8002120 <HAL_RCC_GetSysClockFreq+0x358>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fb4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fb6:	4b5a      	ldr	r3, [pc, #360]	; (8002120 <HAL_RCC_GetSysClockFreq+0x358>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d04d      	beq.n	800205e <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fc2:	4b57      	ldr	r3, [pc, #348]	; (8002120 <HAL_RCC_GetSysClockFreq+0x358>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	099b      	lsrs	r3, r3, #6
 8001fc8:	461a      	mov	r2, r3
 8001fca:	f04f 0300 	mov.w	r3, #0
 8001fce:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001fd2:	f04f 0100 	mov.w	r1, #0
 8001fd6:	ea02 0800 	and.w	r8, r2, r0
 8001fda:	ea03 0901 	and.w	r9, r3, r1
 8001fde:	4640      	mov	r0, r8
 8001fe0:	4649      	mov	r1, r9
 8001fe2:	f04f 0200 	mov.w	r2, #0
 8001fe6:	f04f 0300 	mov.w	r3, #0
 8001fea:	014b      	lsls	r3, r1, #5
 8001fec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ff0:	0142      	lsls	r2, r0, #5
 8001ff2:	4610      	mov	r0, r2
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	ebb0 0008 	subs.w	r0, r0, r8
 8001ffa:	eb61 0109 	sbc.w	r1, r1, r9
 8001ffe:	f04f 0200 	mov.w	r2, #0
 8002002:	f04f 0300 	mov.w	r3, #0
 8002006:	018b      	lsls	r3, r1, #6
 8002008:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800200c:	0182      	lsls	r2, r0, #6
 800200e:	1a12      	subs	r2, r2, r0
 8002010:	eb63 0301 	sbc.w	r3, r3, r1
 8002014:	f04f 0000 	mov.w	r0, #0
 8002018:	f04f 0100 	mov.w	r1, #0
 800201c:	00d9      	lsls	r1, r3, #3
 800201e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002022:	00d0      	lsls	r0, r2, #3
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	eb12 0208 	adds.w	r2, r2, r8
 800202c:	eb43 0309 	adc.w	r3, r3, r9
 8002030:	f04f 0000 	mov.w	r0, #0
 8002034:	f04f 0100 	mov.w	r1, #0
 8002038:	0259      	lsls	r1, r3, #9
 800203a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800203e:	0250      	lsls	r0, r2, #9
 8002040:	4602      	mov	r2, r0
 8002042:	460b      	mov	r3, r1
 8002044:	4610      	mov	r0, r2
 8002046:	4619      	mov	r1, r3
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	461a      	mov	r2, r3
 800204c:	f04f 0300 	mov.w	r3, #0
 8002050:	f7fe f8d8 	bl	8000204 <__aeabi_uldivmod>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	4613      	mov	r3, r2
 800205a:	61fb      	str	r3, [r7, #28]
 800205c:	e04a      	b.n	80020f4 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800205e:	4b30      	ldr	r3, [pc, #192]	; (8002120 <HAL_RCC_GetSysClockFreq+0x358>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	099b      	lsrs	r3, r3, #6
 8002064:	461a      	mov	r2, r3
 8002066:	f04f 0300 	mov.w	r3, #0
 800206a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800206e:	f04f 0100 	mov.w	r1, #0
 8002072:	ea02 0400 	and.w	r4, r2, r0
 8002076:	ea03 0501 	and.w	r5, r3, r1
 800207a:	4620      	mov	r0, r4
 800207c:	4629      	mov	r1, r5
 800207e:	f04f 0200 	mov.w	r2, #0
 8002082:	f04f 0300 	mov.w	r3, #0
 8002086:	014b      	lsls	r3, r1, #5
 8002088:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800208c:	0142      	lsls	r2, r0, #5
 800208e:	4610      	mov	r0, r2
 8002090:	4619      	mov	r1, r3
 8002092:	1b00      	subs	r0, r0, r4
 8002094:	eb61 0105 	sbc.w	r1, r1, r5
 8002098:	f04f 0200 	mov.w	r2, #0
 800209c:	f04f 0300 	mov.w	r3, #0
 80020a0:	018b      	lsls	r3, r1, #6
 80020a2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80020a6:	0182      	lsls	r2, r0, #6
 80020a8:	1a12      	subs	r2, r2, r0
 80020aa:	eb63 0301 	sbc.w	r3, r3, r1
 80020ae:	f04f 0000 	mov.w	r0, #0
 80020b2:	f04f 0100 	mov.w	r1, #0
 80020b6:	00d9      	lsls	r1, r3, #3
 80020b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80020bc:	00d0      	lsls	r0, r2, #3
 80020be:	4602      	mov	r2, r0
 80020c0:	460b      	mov	r3, r1
 80020c2:	1912      	adds	r2, r2, r4
 80020c4:	eb45 0303 	adc.w	r3, r5, r3
 80020c8:	f04f 0000 	mov.w	r0, #0
 80020cc:	f04f 0100 	mov.w	r1, #0
 80020d0:	0299      	lsls	r1, r3, #10
 80020d2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80020d6:	0290      	lsls	r0, r2, #10
 80020d8:	4602      	mov	r2, r0
 80020da:	460b      	mov	r3, r1
 80020dc:	4610      	mov	r0, r2
 80020de:	4619      	mov	r1, r3
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	461a      	mov	r2, r3
 80020e4:	f04f 0300 	mov.w	r3, #0
 80020e8:	f7fe f88c 	bl	8000204 <__aeabi_uldivmod>
 80020ec:	4602      	mov	r2, r0
 80020ee:	460b      	mov	r3, r1
 80020f0:	4613      	mov	r3, r2
 80020f2:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80020f4:	4b0a      	ldr	r3, [pc, #40]	; (8002120 <HAL_RCC_GetSysClockFreq+0x358>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	0f1b      	lsrs	r3, r3, #28
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8002100:	69fa      	ldr	r2, [r7, #28]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	fbb2 f3f3 	udiv	r3, r2, r3
 8002108:	61bb      	str	r3, [r7, #24]
      break;
 800210a:	e002      	b.n	8002112 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800210c:	4b05      	ldr	r3, [pc, #20]	; (8002124 <HAL_RCC_GetSysClockFreq+0x35c>)
 800210e:	61bb      	str	r3, [r7, #24]
      break;
 8002110:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002112:	69bb      	ldr	r3, [r7, #24]
}
 8002114:	4618      	mov	r0, r3
 8002116:	3720      	adds	r7, #32
 8002118:	46bd      	mov	sp, r7
 800211a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800211e:	bf00      	nop
 8002120:	40023800 	.word	0x40023800
 8002124:	00f42400 	.word	0x00f42400
 8002128:	007a1200 	.word	0x007a1200

0800212c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e28d      	b.n	800265a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	f000 8083 	beq.w	8002252 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800214c:	4b94      	ldr	r3, [pc, #592]	; (80023a0 <HAL_RCC_OscConfig+0x274>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f003 030c 	and.w	r3, r3, #12
 8002154:	2b04      	cmp	r3, #4
 8002156:	d019      	beq.n	800218c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002158:	4b91      	ldr	r3, [pc, #580]	; (80023a0 <HAL_RCC_OscConfig+0x274>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002160:	2b08      	cmp	r3, #8
 8002162:	d106      	bne.n	8002172 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002164:	4b8e      	ldr	r3, [pc, #568]	; (80023a0 <HAL_RCC_OscConfig+0x274>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800216c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002170:	d00c      	beq.n	800218c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002172:	4b8b      	ldr	r3, [pc, #556]	; (80023a0 <HAL_RCC_OscConfig+0x274>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800217a:	2b0c      	cmp	r3, #12
 800217c:	d112      	bne.n	80021a4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800217e:	4b88      	ldr	r3, [pc, #544]	; (80023a0 <HAL_RCC_OscConfig+0x274>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002186:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800218a:	d10b      	bne.n	80021a4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800218c:	4b84      	ldr	r3, [pc, #528]	; (80023a0 <HAL_RCC_OscConfig+0x274>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d05b      	beq.n	8002250 <HAL_RCC_OscConfig+0x124>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d157      	bne.n	8002250 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e25a      	b.n	800265a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021ac:	d106      	bne.n	80021bc <HAL_RCC_OscConfig+0x90>
 80021ae:	4b7c      	ldr	r3, [pc, #496]	; (80023a0 <HAL_RCC_OscConfig+0x274>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a7b      	ldr	r2, [pc, #492]	; (80023a0 <HAL_RCC_OscConfig+0x274>)
 80021b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b8:	6013      	str	r3, [r2, #0]
 80021ba:	e01d      	b.n	80021f8 <HAL_RCC_OscConfig+0xcc>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021c4:	d10c      	bne.n	80021e0 <HAL_RCC_OscConfig+0xb4>
 80021c6:	4b76      	ldr	r3, [pc, #472]	; (80023a0 <HAL_RCC_OscConfig+0x274>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a75      	ldr	r2, [pc, #468]	; (80023a0 <HAL_RCC_OscConfig+0x274>)
 80021cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021d0:	6013      	str	r3, [r2, #0]
 80021d2:	4b73      	ldr	r3, [pc, #460]	; (80023a0 <HAL_RCC_OscConfig+0x274>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a72      	ldr	r2, [pc, #456]	; (80023a0 <HAL_RCC_OscConfig+0x274>)
 80021d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021dc:	6013      	str	r3, [r2, #0]
 80021de:	e00b      	b.n	80021f8 <HAL_RCC_OscConfig+0xcc>
 80021e0:	4b6f      	ldr	r3, [pc, #444]	; (80023a0 <HAL_RCC_OscConfig+0x274>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a6e      	ldr	r2, [pc, #440]	; (80023a0 <HAL_RCC_OscConfig+0x274>)
 80021e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021ea:	6013      	str	r3, [r2, #0]
 80021ec:	4b6c      	ldr	r3, [pc, #432]	; (80023a0 <HAL_RCC_OscConfig+0x274>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a6b      	ldr	r2, [pc, #428]	; (80023a0 <HAL_RCC_OscConfig+0x274>)
 80021f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d013      	beq.n	8002228 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002200:	f7ff f93a 	bl	8001478 <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002208:	f7ff f936 	bl	8001478 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b64      	cmp	r3, #100	; 0x64
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e21f      	b.n	800265a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800221a:	4b61      	ldr	r3, [pc, #388]	; (80023a0 <HAL_RCC_OscConfig+0x274>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d0f0      	beq.n	8002208 <HAL_RCC_OscConfig+0xdc>
 8002226:	e014      	b.n	8002252 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002228:	f7ff f926 	bl	8001478 <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002230:	f7ff f922 	bl	8001478 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b64      	cmp	r3, #100	; 0x64
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e20b      	b.n	800265a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002242:	4b57      	ldr	r3, [pc, #348]	; (80023a0 <HAL_RCC_OscConfig+0x274>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1f0      	bne.n	8002230 <HAL_RCC_OscConfig+0x104>
 800224e:	e000      	b.n	8002252 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002250:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d06f      	beq.n	800233e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800225e:	4b50      	ldr	r3, [pc, #320]	; (80023a0 <HAL_RCC_OscConfig+0x274>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f003 030c 	and.w	r3, r3, #12
 8002266:	2b00      	cmp	r3, #0
 8002268:	d017      	beq.n	800229a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800226a:	4b4d      	ldr	r3, [pc, #308]	; (80023a0 <HAL_RCC_OscConfig+0x274>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002272:	2b08      	cmp	r3, #8
 8002274:	d105      	bne.n	8002282 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002276:	4b4a      	ldr	r3, [pc, #296]	; (80023a0 <HAL_RCC_OscConfig+0x274>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00b      	beq.n	800229a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002282:	4b47      	ldr	r3, [pc, #284]	; (80023a0 <HAL_RCC_OscConfig+0x274>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800228a:	2b0c      	cmp	r3, #12
 800228c:	d11c      	bne.n	80022c8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800228e:	4b44      	ldr	r3, [pc, #272]	; (80023a0 <HAL_RCC_OscConfig+0x274>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d116      	bne.n	80022c8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800229a:	4b41      	ldr	r3, [pc, #260]	; (80023a0 <HAL_RCC_OscConfig+0x274>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d005      	beq.n	80022b2 <HAL_RCC_OscConfig+0x186>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d001      	beq.n	80022b2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e1d3      	b.n	800265a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b2:	4b3b      	ldr	r3, [pc, #236]	; (80023a0 <HAL_RCC_OscConfig+0x274>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	4937      	ldr	r1, [pc, #220]	; (80023a0 <HAL_RCC_OscConfig+0x274>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022c6:	e03a      	b.n	800233e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d020      	beq.n	8002312 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022d0:	4b34      	ldr	r3, [pc, #208]	; (80023a4 <HAL_RCC_OscConfig+0x278>)
 80022d2:	2201      	movs	r2, #1
 80022d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d6:	f7ff f8cf 	bl	8001478 <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022dc:	e008      	b.n	80022f0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022de:	f7ff f8cb 	bl	8001478 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e1b4      	b.n	800265a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f0:	4b2b      	ldr	r3, [pc, #172]	; (80023a0 <HAL_RCC_OscConfig+0x274>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d0f0      	beq.n	80022de <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022fc:	4b28      	ldr	r3, [pc, #160]	; (80023a0 <HAL_RCC_OscConfig+0x274>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	4925      	ldr	r1, [pc, #148]	; (80023a0 <HAL_RCC_OscConfig+0x274>)
 800230c:	4313      	orrs	r3, r2
 800230e:	600b      	str	r3, [r1, #0]
 8002310:	e015      	b.n	800233e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002312:	4b24      	ldr	r3, [pc, #144]	; (80023a4 <HAL_RCC_OscConfig+0x278>)
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002318:	f7ff f8ae 	bl	8001478 <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002320:	f7ff f8aa 	bl	8001478 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e193      	b.n	800265a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002332:	4b1b      	ldr	r3, [pc, #108]	; (80023a0 <HAL_RCC_OscConfig+0x274>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1f0      	bne.n	8002320 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0308 	and.w	r3, r3, #8
 8002346:	2b00      	cmp	r3, #0
 8002348:	d036      	beq.n	80023b8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d016      	beq.n	8002380 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002352:	4b15      	ldr	r3, [pc, #84]	; (80023a8 <HAL_RCC_OscConfig+0x27c>)
 8002354:	2201      	movs	r2, #1
 8002356:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002358:	f7ff f88e 	bl	8001478 <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002360:	f7ff f88a 	bl	8001478 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e173      	b.n	800265a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002372:	4b0b      	ldr	r3, [pc, #44]	; (80023a0 <HAL_RCC_OscConfig+0x274>)
 8002374:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d0f0      	beq.n	8002360 <HAL_RCC_OscConfig+0x234>
 800237e:	e01b      	b.n	80023b8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002380:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <HAL_RCC_OscConfig+0x27c>)
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002386:	f7ff f877 	bl	8001478 <HAL_GetTick>
 800238a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800238c:	e00e      	b.n	80023ac <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800238e:	f7ff f873 	bl	8001478 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d907      	bls.n	80023ac <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e15c      	b.n	800265a <HAL_RCC_OscConfig+0x52e>
 80023a0:	40023800 	.word	0x40023800
 80023a4:	42470000 	.word	0x42470000
 80023a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023ac:	4b8a      	ldr	r3, [pc, #552]	; (80025d8 <HAL_RCC_OscConfig+0x4ac>)
 80023ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1ea      	bne.n	800238e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f000 8097 	beq.w	80024f4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023c6:	2300      	movs	r3, #0
 80023c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ca:	4b83      	ldr	r3, [pc, #524]	; (80025d8 <HAL_RCC_OscConfig+0x4ac>)
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d10f      	bne.n	80023f6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023d6:	2300      	movs	r3, #0
 80023d8:	60bb      	str	r3, [r7, #8]
 80023da:	4b7f      	ldr	r3, [pc, #508]	; (80025d8 <HAL_RCC_OscConfig+0x4ac>)
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	4a7e      	ldr	r2, [pc, #504]	; (80025d8 <HAL_RCC_OscConfig+0x4ac>)
 80023e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023e4:	6413      	str	r3, [r2, #64]	; 0x40
 80023e6:	4b7c      	ldr	r3, [pc, #496]	; (80025d8 <HAL_RCC_OscConfig+0x4ac>)
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ee:	60bb      	str	r3, [r7, #8]
 80023f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023f2:	2301      	movs	r3, #1
 80023f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f6:	4b79      	ldr	r3, [pc, #484]	; (80025dc <HAL_RCC_OscConfig+0x4b0>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d118      	bne.n	8002434 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002402:	4b76      	ldr	r3, [pc, #472]	; (80025dc <HAL_RCC_OscConfig+0x4b0>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a75      	ldr	r2, [pc, #468]	; (80025dc <HAL_RCC_OscConfig+0x4b0>)
 8002408:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800240c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800240e:	f7ff f833 	bl	8001478 <HAL_GetTick>
 8002412:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002414:	e008      	b.n	8002428 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002416:	f7ff f82f 	bl	8001478 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e118      	b.n	800265a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002428:	4b6c      	ldr	r3, [pc, #432]	; (80025dc <HAL_RCC_OscConfig+0x4b0>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002430:	2b00      	cmp	r3, #0
 8002432:	d0f0      	beq.n	8002416 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d106      	bne.n	800244a <HAL_RCC_OscConfig+0x31e>
 800243c:	4b66      	ldr	r3, [pc, #408]	; (80025d8 <HAL_RCC_OscConfig+0x4ac>)
 800243e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002440:	4a65      	ldr	r2, [pc, #404]	; (80025d8 <HAL_RCC_OscConfig+0x4ac>)
 8002442:	f043 0301 	orr.w	r3, r3, #1
 8002446:	6713      	str	r3, [r2, #112]	; 0x70
 8002448:	e01c      	b.n	8002484 <HAL_RCC_OscConfig+0x358>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	2b05      	cmp	r3, #5
 8002450:	d10c      	bne.n	800246c <HAL_RCC_OscConfig+0x340>
 8002452:	4b61      	ldr	r3, [pc, #388]	; (80025d8 <HAL_RCC_OscConfig+0x4ac>)
 8002454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002456:	4a60      	ldr	r2, [pc, #384]	; (80025d8 <HAL_RCC_OscConfig+0x4ac>)
 8002458:	f043 0304 	orr.w	r3, r3, #4
 800245c:	6713      	str	r3, [r2, #112]	; 0x70
 800245e:	4b5e      	ldr	r3, [pc, #376]	; (80025d8 <HAL_RCC_OscConfig+0x4ac>)
 8002460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002462:	4a5d      	ldr	r2, [pc, #372]	; (80025d8 <HAL_RCC_OscConfig+0x4ac>)
 8002464:	f043 0301 	orr.w	r3, r3, #1
 8002468:	6713      	str	r3, [r2, #112]	; 0x70
 800246a:	e00b      	b.n	8002484 <HAL_RCC_OscConfig+0x358>
 800246c:	4b5a      	ldr	r3, [pc, #360]	; (80025d8 <HAL_RCC_OscConfig+0x4ac>)
 800246e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002470:	4a59      	ldr	r2, [pc, #356]	; (80025d8 <HAL_RCC_OscConfig+0x4ac>)
 8002472:	f023 0301 	bic.w	r3, r3, #1
 8002476:	6713      	str	r3, [r2, #112]	; 0x70
 8002478:	4b57      	ldr	r3, [pc, #348]	; (80025d8 <HAL_RCC_OscConfig+0x4ac>)
 800247a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247c:	4a56      	ldr	r2, [pc, #344]	; (80025d8 <HAL_RCC_OscConfig+0x4ac>)
 800247e:	f023 0304 	bic.w	r3, r3, #4
 8002482:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d015      	beq.n	80024b8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800248c:	f7fe fff4 	bl	8001478 <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002492:	e00a      	b.n	80024aa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002494:	f7fe fff0 	bl	8001478 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e0d7      	b.n	800265a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024aa:	4b4b      	ldr	r3, [pc, #300]	; (80025d8 <HAL_RCC_OscConfig+0x4ac>)
 80024ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d0ee      	beq.n	8002494 <HAL_RCC_OscConfig+0x368>
 80024b6:	e014      	b.n	80024e2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b8:	f7fe ffde 	bl	8001478 <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024be:	e00a      	b.n	80024d6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024c0:	f7fe ffda 	bl	8001478 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e0c1      	b.n	800265a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024d6:	4b40      	ldr	r3, [pc, #256]	; (80025d8 <HAL_RCC_OscConfig+0x4ac>)
 80024d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1ee      	bne.n	80024c0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024e2:	7dfb      	ldrb	r3, [r7, #23]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d105      	bne.n	80024f4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024e8:	4b3b      	ldr	r3, [pc, #236]	; (80025d8 <HAL_RCC_OscConfig+0x4ac>)
 80024ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ec:	4a3a      	ldr	r2, [pc, #232]	; (80025d8 <HAL_RCC_OscConfig+0x4ac>)
 80024ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f000 80ad 	beq.w	8002658 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024fe:	4b36      	ldr	r3, [pc, #216]	; (80025d8 <HAL_RCC_OscConfig+0x4ac>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 030c 	and.w	r3, r3, #12
 8002506:	2b08      	cmp	r3, #8
 8002508:	d060      	beq.n	80025cc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	2b02      	cmp	r3, #2
 8002510:	d145      	bne.n	800259e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002512:	4b33      	ldr	r3, [pc, #204]	; (80025e0 <HAL_RCC_OscConfig+0x4b4>)
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002518:	f7fe ffae 	bl	8001478 <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002520:	f7fe ffaa 	bl	8001478 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e093      	b.n	800265a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002532:	4b29      	ldr	r3, [pc, #164]	; (80025d8 <HAL_RCC_OscConfig+0x4ac>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1f0      	bne.n	8002520 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69da      	ldr	r2, [r3, #28]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	431a      	orrs	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254c:	019b      	lsls	r3, r3, #6
 800254e:	431a      	orrs	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002554:	085b      	lsrs	r3, r3, #1
 8002556:	3b01      	subs	r3, #1
 8002558:	041b      	lsls	r3, r3, #16
 800255a:	431a      	orrs	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002560:	061b      	lsls	r3, r3, #24
 8002562:	431a      	orrs	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002568:	071b      	lsls	r3, r3, #28
 800256a:	491b      	ldr	r1, [pc, #108]	; (80025d8 <HAL_RCC_OscConfig+0x4ac>)
 800256c:	4313      	orrs	r3, r2
 800256e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002570:	4b1b      	ldr	r3, [pc, #108]	; (80025e0 <HAL_RCC_OscConfig+0x4b4>)
 8002572:	2201      	movs	r2, #1
 8002574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002576:	f7fe ff7f 	bl	8001478 <HAL_GetTick>
 800257a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800257c:	e008      	b.n	8002590 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800257e:	f7fe ff7b 	bl	8001478 <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d901      	bls.n	8002590 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e064      	b.n	800265a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002590:	4b11      	ldr	r3, [pc, #68]	; (80025d8 <HAL_RCC_OscConfig+0x4ac>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d0f0      	beq.n	800257e <HAL_RCC_OscConfig+0x452>
 800259c:	e05c      	b.n	8002658 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800259e:	4b10      	ldr	r3, [pc, #64]	; (80025e0 <HAL_RCC_OscConfig+0x4b4>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a4:	f7fe ff68 	bl	8001478 <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025aa:	e008      	b.n	80025be <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025ac:	f7fe ff64 	bl	8001478 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e04d      	b.n	800265a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025be:	4b06      	ldr	r3, [pc, #24]	; (80025d8 <HAL_RCC_OscConfig+0x4ac>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1f0      	bne.n	80025ac <HAL_RCC_OscConfig+0x480>
 80025ca:	e045      	b.n	8002658 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d107      	bne.n	80025e4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e040      	b.n	800265a <HAL_RCC_OscConfig+0x52e>
 80025d8:	40023800 	.word	0x40023800
 80025dc:	40007000 	.word	0x40007000
 80025e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025e4:	4b1f      	ldr	r3, [pc, #124]	; (8002664 <HAL_RCC_OscConfig+0x538>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d030      	beq.n	8002654 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d129      	bne.n	8002654 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800260a:	429a      	cmp	r2, r3
 800260c:	d122      	bne.n	8002654 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002614:	4013      	ands	r3, r2
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800261a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800261c:	4293      	cmp	r3, r2
 800261e:	d119      	bne.n	8002654 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262a:	085b      	lsrs	r3, r3, #1
 800262c:	3b01      	subs	r3, #1
 800262e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002630:	429a      	cmp	r2, r3
 8002632:	d10f      	bne.n	8002654 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002640:	429a      	cmp	r2, r3
 8002642:	d107      	bne.n	8002654 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002650:	429a      	cmp	r2, r3
 8002652:	d001      	beq.n	8002658 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e000      	b.n	800265a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3718      	adds	r7, #24
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	40023800 	.word	0x40023800

08002668 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e041      	b.n	80026fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d106      	bne.n	8002694 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7fe fd72 	bl	8001178 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2202      	movs	r2, #2
 8002698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	3304      	adds	r3, #4
 80026a4:	4619      	mov	r1, r3
 80026a6:	4610      	mov	r0, r2
 80026a8:	f000 f8be 	bl	8002828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
	...

08002708 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b01      	cmp	r3, #1
 800271a:	d001      	beq.n	8002720 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e046      	b.n	80027ae <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2202      	movs	r2, #2
 8002724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a23      	ldr	r2, [pc, #140]	; (80027bc <HAL_TIM_Base_Start+0xb4>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d022      	beq.n	8002778 <HAL_TIM_Base_Start+0x70>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800273a:	d01d      	beq.n	8002778 <HAL_TIM_Base_Start+0x70>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a1f      	ldr	r2, [pc, #124]	; (80027c0 <HAL_TIM_Base_Start+0xb8>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d018      	beq.n	8002778 <HAL_TIM_Base_Start+0x70>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a1e      	ldr	r2, [pc, #120]	; (80027c4 <HAL_TIM_Base_Start+0xbc>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d013      	beq.n	8002778 <HAL_TIM_Base_Start+0x70>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a1c      	ldr	r2, [pc, #112]	; (80027c8 <HAL_TIM_Base_Start+0xc0>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d00e      	beq.n	8002778 <HAL_TIM_Base_Start+0x70>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a1b      	ldr	r2, [pc, #108]	; (80027cc <HAL_TIM_Base_Start+0xc4>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d009      	beq.n	8002778 <HAL_TIM_Base_Start+0x70>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a19      	ldr	r2, [pc, #100]	; (80027d0 <HAL_TIM_Base_Start+0xc8>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d004      	beq.n	8002778 <HAL_TIM_Base_Start+0x70>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a18      	ldr	r2, [pc, #96]	; (80027d4 <HAL_TIM_Base_Start+0xcc>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d111      	bne.n	800279c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f003 0307 	and.w	r3, r3, #7
 8002782:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2b06      	cmp	r3, #6
 8002788:	d010      	beq.n	80027ac <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f042 0201 	orr.w	r2, r2, #1
 8002798:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800279a:	e007      	b.n	80027ac <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f042 0201 	orr.w	r2, r2, #1
 80027aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3714      	adds	r7, #20
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	40010000 	.word	0x40010000
 80027c0:	40000400 	.word	0x40000400
 80027c4:	40000800 	.word	0x40000800
 80027c8:	40000c00 	.word	0x40000c00
 80027cc:	40010400 	.word	0x40010400
 80027d0:	40014000 	.word	0x40014000
 80027d4:	40001800 	.word	0x40001800

080027d8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6a1a      	ldr	r2, [r3, #32]
 80027e6:	f241 1311 	movw	r3, #4369	; 0x1111
 80027ea:	4013      	ands	r3, r2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d10f      	bne.n	8002810 <HAL_TIM_Base_Stop+0x38>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6a1a      	ldr	r2, [r3, #32]
 80027f6:	f240 4344 	movw	r3, #1092	; 0x444
 80027fa:	4013      	ands	r3, r2
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d107      	bne.n	8002810 <HAL_TIM_Base_Stop+0x38>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f022 0201 	bic.w	r2, r2, #1
 800280e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
	...

08002828 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a40      	ldr	r2, [pc, #256]	; (800293c <TIM_Base_SetConfig+0x114>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d013      	beq.n	8002868 <TIM_Base_SetConfig+0x40>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002846:	d00f      	beq.n	8002868 <TIM_Base_SetConfig+0x40>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a3d      	ldr	r2, [pc, #244]	; (8002940 <TIM_Base_SetConfig+0x118>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d00b      	beq.n	8002868 <TIM_Base_SetConfig+0x40>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a3c      	ldr	r2, [pc, #240]	; (8002944 <TIM_Base_SetConfig+0x11c>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d007      	beq.n	8002868 <TIM_Base_SetConfig+0x40>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4a3b      	ldr	r2, [pc, #236]	; (8002948 <TIM_Base_SetConfig+0x120>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d003      	beq.n	8002868 <TIM_Base_SetConfig+0x40>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4a3a      	ldr	r2, [pc, #232]	; (800294c <TIM_Base_SetConfig+0x124>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d108      	bne.n	800287a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800286e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	4313      	orrs	r3, r2
 8002878:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a2f      	ldr	r2, [pc, #188]	; (800293c <TIM_Base_SetConfig+0x114>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d02b      	beq.n	80028da <TIM_Base_SetConfig+0xb2>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002888:	d027      	beq.n	80028da <TIM_Base_SetConfig+0xb2>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a2c      	ldr	r2, [pc, #176]	; (8002940 <TIM_Base_SetConfig+0x118>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d023      	beq.n	80028da <TIM_Base_SetConfig+0xb2>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a2b      	ldr	r2, [pc, #172]	; (8002944 <TIM_Base_SetConfig+0x11c>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d01f      	beq.n	80028da <TIM_Base_SetConfig+0xb2>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a2a      	ldr	r2, [pc, #168]	; (8002948 <TIM_Base_SetConfig+0x120>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d01b      	beq.n	80028da <TIM_Base_SetConfig+0xb2>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a29      	ldr	r2, [pc, #164]	; (800294c <TIM_Base_SetConfig+0x124>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d017      	beq.n	80028da <TIM_Base_SetConfig+0xb2>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a28      	ldr	r2, [pc, #160]	; (8002950 <TIM_Base_SetConfig+0x128>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d013      	beq.n	80028da <TIM_Base_SetConfig+0xb2>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a27      	ldr	r2, [pc, #156]	; (8002954 <TIM_Base_SetConfig+0x12c>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d00f      	beq.n	80028da <TIM_Base_SetConfig+0xb2>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a26      	ldr	r2, [pc, #152]	; (8002958 <TIM_Base_SetConfig+0x130>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d00b      	beq.n	80028da <TIM_Base_SetConfig+0xb2>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a25      	ldr	r2, [pc, #148]	; (800295c <TIM_Base_SetConfig+0x134>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d007      	beq.n	80028da <TIM_Base_SetConfig+0xb2>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a24      	ldr	r2, [pc, #144]	; (8002960 <TIM_Base_SetConfig+0x138>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d003      	beq.n	80028da <TIM_Base_SetConfig+0xb2>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a23      	ldr	r2, [pc, #140]	; (8002964 <TIM_Base_SetConfig+0x13c>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d108      	bne.n	80028ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a0a      	ldr	r2, [pc, #40]	; (800293c <TIM_Base_SetConfig+0x114>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d003      	beq.n	8002920 <TIM_Base_SetConfig+0xf8>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a0c      	ldr	r2, [pc, #48]	; (800294c <TIM_Base_SetConfig+0x124>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d103      	bne.n	8002928 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	691a      	ldr	r2, [r3, #16]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	615a      	str	r2, [r3, #20]
}
 800292e:	bf00      	nop
 8002930:	3714      	adds	r7, #20
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	40010000 	.word	0x40010000
 8002940:	40000400 	.word	0x40000400
 8002944:	40000800 	.word	0x40000800
 8002948:	40000c00 	.word	0x40000c00
 800294c:	40010400 	.word	0x40010400
 8002950:	40014000 	.word	0x40014000
 8002954:	40014400 	.word	0x40014400
 8002958:	40014800 	.word	0x40014800
 800295c:	40001800 	.word	0x40001800
 8002960:	40001c00 	.word	0x40001c00
 8002964:	40002000 	.word	0x40002000

08002968 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002978:	2b01      	cmp	r3, #1
 800297a:	d101      	bne.n	8002980 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800297c:	2302      	movs	r3, #2
 800297e:	e05a      	b.n	8002a36 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2202      	movs	r2, #2
 800298c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a21      	ldr	r2, [pc, #132]	; (8002a44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d022      	beq.n	8002a0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029cc:	d01d      	beq.n	8002a0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a1d      	ldr	r2, [pc, #116]	; (8002a48 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d018      	beq.n	8002a0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a1b      	ldr	r2, [pc, #108]	; (8002a4c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d013      	beq.n	8002a0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a1a      	ldr	r2, [pc, #104]	; (8002a50 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d00e      	beq.n	8002a0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a18      	ldr	r2, [pc, #96]	; (8002a54 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d009      	beq.n	8002a0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a17      	ldr	r2, [pc, #92]	; (8002a58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d004      	beq.n	8002a0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a15      	ldr	r2, [pc, #84]	; (8002a5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d10c      	bne.n	8002a24 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	68ba      	ldr	r2, [r7, #8]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68ba      	ldr	r2, [r7, #8]
 8002a22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	40010000 	.word	0x40010000
 8002a48:	40000400 	.word	0x40000400
 8002a4c:	40000800 	.word	0x40000800
 8002a50:	40000c00 	.word	0x40000c00
 8002a54:	40010400 	.word	0x40010400
 8002a58:	40014000 	.word	0x40014000
 8002a5c:	40001800 	.word	0x40001800

08002a60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e03f      	b.n	8002af2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d106      	bne.n	8002a8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f7fe fb98 	bl	80011bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2224      	movs	r2, #36	; 0x24
 8002a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68da      	ldr	r2, [r3, #12]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002aa2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 fe7d 	bl	80037a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	691a      	ldr	r2, [r3, #16]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ab8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	695a      	ldr	r2, [r3, #20]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ac8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68da      	ldr	r2, [r3, #12]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ad8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2220      	movs	r2, #32
 8002aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b08a      	sub	sp, #40	; 0x28
 8002afe:	af02      	add	r7, sp, #8
 8002b00:	60f8      	str	r0, [r7, #12]
 8002b02:	60b9      	str	r1, [r7, #8]
 8002b04:	603b      	str	r3, [r7, #0]
 8002b06:	4613      	mov	r3, r2
 8002b08:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b20      	cmp	r3, #32
 8002b18:	d17c      	bne.n	8002c14 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d002      	beq.n	8002b26 <HAL_UART_Transmit+0x2c>
 8002b20:	88fb      	ldrh	r3, [r7, #6]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e075      	b.n	8002c16 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d101      	bne.n	8002b38 <HAL_UART_Transmit+0x3e>
 8002b34:	2302      	movs	r3, #2
 8002b36:	e06e      	b.n	8002c16 <HAL_UART_Transmit+0x11c>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2221      	movs	r2, #33	; 0x21
 8002b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b4e:	f7fe fc93 	bl	8001478 <HAL_GetTick>
 8002b52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	88fa      	ldrh	r2, [r7, #6]
 8002b58:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	88fa      	ldrh	r2, [r7, #6]
 8002b5e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b68:	d108      	bne.n	8002b7c <HAL_UART_Transmit+0x82>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d104      	bne.n	8002b7c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002b72:	2300      	movs	r3, #0
 8002b74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	61bb      	str	r3, [r7, #24]
 8002b7a:	e003      	b.n	8002b84 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b80:	2300      	movs	r3, #0
 8002b82:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002b8c:	e02a      	b.n	8002be4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	9300      	str	r3, [sp, #0]
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	2200      	movs	r2, #0
 8002b96:	2180      	movs	r1, #128	; 0x80
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f000 fbc1 	bl	8003320 <UART_WaitOnFlagUntilTimeout>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e036      	b.n	8002c16 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10b      	bne.n	8002bc6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	881b      	ldrh	r3, [r3, #0]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bbc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	3302      	adds	r3, #2
 8002bc2:	61bb      	str	r3, [r7, #24]
 8002bc4:	e007      	b.n	8002bd6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	781a      	ldrb	r2, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1cf      	bne.n	8002b8e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	9300      	str	r3, [sp, #0]
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	2140      	movs	r1, #64	; 0x40
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f000 fb91 	bl	8003320 <UART_WaitOnFlagUntilTimeout>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e006      	b.n	8002c16 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002c10:	2300      	movs	r3, #0
 8002c12:	e000      	b.n	8002c16 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002c14:	2302      	movs	r3, #2
  }
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3720      	adds	r7, #32
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b08a      	sub	sp, #40	; 0x28
 8002c22:	af02      	add	r7, sp, #8
 8002c24:	60f8      	str	r0, [r7, #12]
 8002c26:	60b9      	str	r1, [r7, #8]
 8002c28:	603b      	str	r3, [r7, #0]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b20      	cmp	r3, #32
 8002c3c:	f040 808c 	bne.w	8002d58 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d002      	beq.n	8002c4c <HAL_UART_Receive+0x2e>
 8002c46:	88fb      	ldrh	r3, [r7, #6]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e084      	b.n	8002d5a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d101      	bne.n	8002c5e <HAL_UART_Receive+0x40>
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	e07d      	b.n	8002d5a <HAL_UART_Receive+0x13c>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2222      	movs	r2, #34	; 0x22
 8002c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c7a:	f7fe fbfd 	bl	8001478 <HAL_GetTick>
 8002c7e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	88fa      	ldrh	r2, [r7, #6]
 8002c84:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	88fa      	ldrh	r2, [r7, #6]
 8002c8a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c94:	d108      	bne.n	8002ca8 <HAL_UART_Receive+0x8a>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d104      	bne.n	8002ca8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	61bb      	str	r3, [r7, #24]
 8002ca6:	e003      	b.n	8002cb0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cac:	2300      	movs	r3, #0
 8002cae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002cb8:	e043      	b.n	8002d42 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	9300      	str	r3, [sp, #0]
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	2120      	movs	r1, #32
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f000 fb2b 	bl	8003320 <UART_WaitOnFlagUntilTimeout>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e042      	b.n	8002d5a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d10c      	bne.n	8002cf4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	3302      	adds	r3, #2
 8002cf0:	61bb      	str	r3, [r7, #24]
 8002cf2:	e01f      	b.n	8002d34 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cfc:	d007      	beq.n	8002d0e <HAL_UART_Receive+0xf0>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10a      	bne.n	8002d1c <HAL_UART_Receive+0xfe>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d106      	bne.n	8002d1c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	b2da      	uxtb	r2, r3
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	701a      	strb	r2, [r3, #0]
 8002d1a:	e008      	b.n	8002d2e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d28:	b2da      	uxtb	r2, r3
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	3301      	adds	r3, #1
 8002d32:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1b6      	bne.n	8002cba <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2220      	movs	r2, #32
 8002d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002d54:	2300      	movs	r3, #0
 8002d56:	e000      	b.n	8002d5a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002d58:	2302      	movs	r3, #2
  }
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3720      	adds	r7, #32
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b084      	sub	sp, #16
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	60f8      	str	r0, [r7, #12]
 8002d6a:	60b9      	str	r1, [r7, #8]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b20      	cmp	r3, #32
 8002d7a:	d11d      	bne.n	8002db8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d002      	beq.n	8002d88 <HAL_UART_Receive_IT+0x26>
 8002d82:	88fb      	ldrh	r3, [r7, #6]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d101      	bne.n	8002d8c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e016      	b.n	8002dba <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d101      	bne.n	8002d9a <HAL_UART_Receive_IT+0x38>
 8002d96:	2302      	movs	r3, #2
 8002d98:	e00f      	b.n	8002dba <HAL_UART_Receive_IT+0x58>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002da8:	88fb      	ldrh	r3, [r7, #6]
 8002daa:	461a      	mov	r2, r3
 8002dac:	68b9      	ldr	r1, [r7, #8]
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f000 fb24 	bl	80033fc <UART_Start_Receive_IT>
 8002db4:	4603      	mov	r3, r0
 8002db6:	e000      	b.n	8002dba <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002db8:	2302      	movs	r3, #2
  }
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3710      	adds	r7, #16
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
	...

08002dc4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b0ba      	sub	sp, #232	; 0xe8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002dea:	2300      	movs	r3, #0
 8002dec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002df0:	2300      	movs	r3, #0
 8002df2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dfa:	f003 030f 	and.w	r3, r3, #15
 8002dfe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002e02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10f      	bne.n	8002e2a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e0e:	f003 0320 	and.w	r3, r3, #32
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d009      	beq.n	8002e2a <HAL_UART_IRQHandler+0x66>
 8002e16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e1a:	f003 0320 	and.w	r3, r3, #32
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d003      	beq.n	8002e2a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 fc03 	bl	800362e <UART_Receive_IT>
      return;
 8002e28:	e256      	b.n	80032d8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002e2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f000 80de 	beq.w	8002ff0 <HAL_UART_IRQHandler+0x22c>
 8002e34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d106      	bne.n	8002e4e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002e40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e44:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f000 80d1 	beq.w	8002ff0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00b      	beq.n	8002e72 <HAL_UART_IRQHandler+0xae>
 8002e5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d005      	beq.n	8002e72 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6a:	f043 0201 	orr.w	r2, r3, #1
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e76:	f003 0304 	and.w	r3, r3, #4
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00b      	beq.n	8002e96 <HAL_UART_IRQHandler+0xd2>
 8002e7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d005      	beq.n	8002e96 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8e:	f043 0202 	orr.w	r2, r3, #2
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00b      	beq.n	8002eba <HAL_UART_IRQHandler+0xf6>
 8002ea2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d005      	beq.n	8002eba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	f043 0204 	orr.w	r2, r3, #4
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ebe:	f003 0308 	and.w	r3, r3, #8
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d011      	beq.n	8002eea <HAL_UART_IRQHandler+0x126>
 8002ec6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002eca:	f003 0320 	and.w	r3, r3, #32
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d105      	bne.n	8002ede <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002ed2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d005      	beq.n	8002eea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	f043 0208 	orr.w	r2, r3, #8
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f000 81ed 	beq.w	80032ce <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ef4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ef8:	f003 0320 	and.w	r3, r3, #32
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d008      	beq.n	8002f12 <HAL_UART_IRQHandler+0x14e>
 8002f00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f04:	f003 0320 	and.w	r3, r3, #32
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d002      	beq.n	8002f12 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 fb8e 	bl	800362e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	695b      	ldr	r3, [r3, #20]
 8002f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f1c:	2b40      	cmp	r3, #64	; 0x40
 8002f1e:	bf0c      	ite	eq
 8002f20:	2301      	moveq	r3, #1
 8002f22:	2300      	movne	r3, #0
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	f003 0308 	and.w	r3, r3, #8
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d103      	bne.n	8002f3e <HAL_UART_IRQHandler+0x17a>
 8002f36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d04f      	beq.n	8002fde <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 fa96 	bl	8003470 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f4e:	2b40      	cmp	r3, #64	; 0x40
 8002f50:	d141      	bne.n	8002fd6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	3314      	adds	r3, #20
 8002f58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f60:	e853 3f00 	ldrex	r3, [r3]
 8002f64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002f68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	3314      	adds	r3, #20
 8002f7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002f7e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002f82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002f8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002f8e:	e841 2300 	strex	r3, r2, [r1]
 8002f92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002f96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1d9      	bne.n	8002f52 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d013      	beq.n	8002fce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002faa:	4a7d      	ldr	r2, [pc, #500]	; (80031a0 <HAL_UART_IRQHandler+0x3dc>)
 8002fac:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7fe fbed 	bl	8001792 <HAL_DMA_Abort_IT>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d016      	beq.n	8002fec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002fc8:	4610      	mov	r0, r2
 8002fca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fcc:	e00e      	b.n	8002fec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 f990 	bl	80032f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fd4:	e00a      	b.n	8002fec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 f98c 	bl	80032f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fdc:	e006      	b.n	8002fec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 f988 	bl	80032f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002fea:	e170      	b.n	80032ce <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fec:	bf00      	nop
    return;
 8002fee:	e16e      	b.n	80032ce <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	f040 814a 	bne.w	800328e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ffe:	f003 0310 	and.w	r3, r3, #16
 8003002:	2b00      	cmp	r3, #0
 8003004:	f000 8143 	beq.w	800328e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800300c:	f003 0310 	and.w	r3, r3, #16
 8003010:	2b00      	cmp	r3, #0
 8003012:	f000 813c 	beq.w	800328e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003016:	2300      	movs	r3, #0
 8003018:	60bb      	str	r3, [r7, #8]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	60bb      	str	r3, [r7, #8]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	60bb      	str	r3, [r7, #8]
 800302a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003036:	2b40      	cmp	r3, #64	; 0x40
 8003038:	f040 80b4 	bne.w	80031a4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003048:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 8140 	beq.w	80032d2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003056:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800305a:	429a      	cmp	r2, r3
 800305c:	f080 8139 	bcs.w	80032d2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003066:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003072:	f000 8088 	beq.w	8003186 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	330c      	adds	r3, #12
 800307c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003080:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003084:	e853 3f00 	ldrex	r3, [r3]
 8003088:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800308c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003090:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003094:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	330c      	adds	r3, #12
 800309e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80030a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80030a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80030ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80030b2:	e841 2300 	strex	r3, r2, [r1]
 80030b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80030ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1d9      	bne.n	8003076 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	3314      	adds	r3, #20
 80030c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030cc:	e853 3f00 	ldrex	r3, [r3]
 80030d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80030d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030d4:	f023 0301 	bic.w	r3, r3, #1
 80030d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	3314      	adds	r3, #20
 80030e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80030e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80030ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80030ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80030f2:	e841 2300 	strex	r3, r2, [r1]
 80030f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80030f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1e1      	bne.n	80030c2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	3314      	adds	r3, #20
 8003104:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003106:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003108:	e853 3f00 	ldrex	r3, [r3]
 800310c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800310e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003110:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003114:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	3314      	adds	r3, #20
 800311e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003122:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003124:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003126:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003128:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800312a:	e841 2300 	strex	r3, r2, [r1]
 800312e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003130:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1e3      	bne.n	80030fe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2220      	movs	r2, #32
 800313a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	330c      	adds	r3, #12
 800314a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800314c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800314e:	e853 3f00 	ldrex	r3, [r3]
 8003152:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003154:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003156:	f023 0310 	bic.w	r3, r3, #16
 800315a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	330c      	adds	r3, #12
 8003164:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003168:	65ba      	str	r2, [r7, #88]	; 0x58
 800316a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800316c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800316e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003170:	e841 2300 	strex	r3, r2, [r1]
 8003174:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003176:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1e3      	bne.n	8003144 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003180:	4618      	mov	r0, r3
 8003182:	f7fe fa96 	bl	80016b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800318e:	b29b      	uxth	r3, r3
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	b29b      	uxth	r3, r3
 8003194:	4619      	mov	r1, r3
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 f8b6 	bl	8003308 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800319c:	e099      	b.n	80032d2 <HAL_UART_IRQHandler+0x50e>
 800319e:	bf00      	nop
 80031a0:	08003537 	.word	0x08003537
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f000 808b 	beq.w	80032d6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80031c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f000 8086 	beq.w	80032d6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	330c      	adds	r3, #12
 80031d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031d4:	e853 3f00 	ldrex	r3, [r3]
 80031d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80031da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80031e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	330c      	adds	r3, #12
 80031ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80031ee:	647a      	str	r2, [r7, #68]	; 0x44
 80031f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80031f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031f6:	e841 2300 	strex	r3, r2, [r1]
 80031fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80031fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1e3      	bne.n	80031ca <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	3314      	adds	r3, #20
 8003208:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800320a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320c:	e853 3f00 	ldrex	r3, [r3]
 8003210:	623b      	str	r3, [r7, #32]
   return(result);
 8003212:	6a3b      	ldr	r3, [r7, #32]
 8003214:	f023 0301 	bic.w	r3, r3, #1
 8003218:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	3314      	adds	r3, #20
 8003222:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003226:	633a      	str	r2, [r7, #48]	; 0x30
 8003228:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800322a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800322c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800322e:	e841 2300 	strex	r3, r2, [r1]
 8003232:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1e3      	bne.n	8003202 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2220      	movs	r2, #32
 800323e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	330c      	adds	r3, #12
 800324e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	e853 3f00 	ldrex	r3, [r3]
 8003256:	60fb      	str	r3, [r7, #12]
   return(result);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f023 0310 	bic.w	r3, r3, #16
 800325e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	330c      	adds	r3, #12
 8003268:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800326c:	61fa      	str	r2, [r7, #28]
 800326e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003270:	69b9      	ldr	r1, [r7, #24]
 8003272:	69fa      	ldr	r2, [r7, #28]
 8003274:	e841 2300 	strex	r3, r2, [r1]
 8003278:	617b      	str	r3, [r7, #20]
   return(result);
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1e3      	bne.n	8003248 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003280:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003284:	4619      	mov	r1, r3
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 f83e 	bl	8003308 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800328c:	e023      	b.n	80032d6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800328e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003296:	2b00      	cmp	r3, #0
 8003298:	d009      	beq.n	80032ae <HAL_UART_IRQHandler+0x4ea>
 800329a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800329e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d003      	beq.n	80032ae <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f959 	bl	800355e <UART_Transmit_IT>
    return;
 80032ac:	e014      	b.n	80032d8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80032ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00e      	beq.n	80032d8 <HAL_UART_IRQHandler+0x514>
 80032ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d008      	beq.n	80032d8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 f999 	bl	80035fe <UART_EndTransmit_IT>
    return;
 80032cc:	e004      	b.n	80032d8 <HAL_UART_IRQHandler+0x514>
    return;
 80032ce:	bf00      	nop
 80032d0:	e002      	b.n	80032d8 <HAL_UART_IRQHandler+0x514>
      return;
 80032d2:	bf00      	nop
 80032d4:	e000      	b.n	80032d8 <HAL_UART_IRQHandler+0x514>
      return;
 80032d6:	bf00      	nop
  }
}
 80032d8:	37e8      	adds	r7, #232	; 0xe8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop

080032e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	460b      	mov	r3, r1
 8003312:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003314:	bf00      	nop
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b090      	sub	sp, #64	; 0x40
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	603b      	str	r3, [r7, #0]
 800332c:	4613      	mov	r3, r2
 800332e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003330:	e050      	b.n	80033d4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003332:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003338:	d04c      	beq.n	80033d4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800333a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800333c:	2b00      	cmp	r3, #0
 800333e:	d007      	beq.n	8003350 <UART_WaitOnFlagUntilTimeout+0x30>
 8003340:	f7fe f89a 	bl	8001478 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800334c:	429a      	cmp	r2, r3
 800334e:	d241      	bcs.n	80033d4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	330c      	adds	r3, #12
 8003356:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800335a:	e853 3f00 	ldrex	r3, [r3]
 800335e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003362:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003366:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	330c      	adds	r3, #12
 800336e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003370:	637a      	str	r2, [r7, #52]	; 0x34
 8003372:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003374:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003376:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003378:	e841 2300 	strex	r3, r2, [r1]
 800337c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800337e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1e5      	bne.n	8003350 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	3314      	adds	r3, #20
 800338a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	e853 3f00 	ldrex	r3, [r3]
 8003392:	613b      	str	r3, [r7, #16]
   return(result);
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	f023 0301 	bic.w	r3, r3, #1
 800339a:	63bb      	str	r3, [r7, #56]	; 0x38
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	3314      	adds	r3, #20
 80033a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033a4:	623a      	str	r2, [r7, #32]
 80033a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a8:	69f9      	ldr	r1, [r7, #28]
 80033aa:	6a3a      	ldr	r2, [r7, #32]
 80033ac:	e841 2300 	strex	r3, r2, [r1]
 80033b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d1e5      	bne.n	8003384 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2220      	movs	r2, #32
 80033bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2220      	movs	r2, #32
 80033c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e00f      	b.n	80033f4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	4013      	ands	r3, r2
 80033de:	68ba      	ldr	r2, [r7, #8]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	bf0c      	ite	eq
 80033e4:	2301      	moveq	r3, #1
 80033e6:	2300      	movne	r3, #0
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	461a      	mov	r2, r3
 80033ec:	79fb      	ldrb	r3, [r7, #7]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d09f      	beq.n	8003332 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3740      	adds	r7, #64	; 0x40
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	4613      	mov	r3, r2
 8003408:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	68ba      	ldr	r2, [r7, #8]
 800340e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	88fa      	ldrh	r2, [r7, #6]
 8003414:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	88fa      	ldrh	r2, [r7, #6]
 800341a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2222      	movs	r2, #34	; 0x22
 8003426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68da      	ldr	r2, [r3, #12]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003440:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	695a      	ldr	r2, [r3, #20]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f042 0201 	orr.w	r2, r2, #1
 8003450:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68da      	ldr	r2, [r3, #12]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f042 0220 	orr.w	r2, r2, #32
 8003460:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3714      	adds	r7, #20
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003470:	b480      	push	{r7}
 8003472:	b095      	sub	sp, #84	; 0x54
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	330c      	adds	r3, #12
 800347e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003482:	e853 3f00 	ldrex	r3, [r3]
 8003486:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800348e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	330c      	adds	r3, #12
 8003496:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003498:	643a      	str	r2, [r7, #64]	; 0x40
 800349a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800349c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800349e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80034a0:	e841 2300 	strex	r3, r2, [r1]
 80034a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80034a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d1e5      	bne.n	8003478 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	3314      	adds	r3, #20
 80034b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b4:	6a3b      	ldr	r3, [r7, #32]
 80034b6:	e853 3f00 	ldrex	r3, [r3]
 80034ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	f023 0301 	bic.w	r3, r3, #1
 80034c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	3314      	adds	r3, #20
 80034ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034d4:	e841 2300 	strex	r3, r2, [r1]
 80034d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80034da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1e5      	bne.n	80034ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d119      	bne.n	800351c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	330c      	adds	r3, #12
 80034ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	e853 3f00 	ldrex	r3, [r3]
 80034f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	f023 0310 	bic.w	r3, r3, #16
 80034fe:	647b      	str	r3, [r7, #68]	; 0x44
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	330c      	adds	r3, #12
 8003506:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003508:	61ba      	str	r2, [r7, #24]
 800350a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800350c:	6979      	ldr	r1, [r7, #20]
 800350e:	69ba      	ldr	r2, [r7, #24]
 8003510:	e841 2300 	strex	r3, r2, [r1]
 8003514:	613b      	str	r3, [r7, #16]
   return(result);
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d1e5      	bne.n	80034e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2220      	movs	r2, #32
 8003520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	631a      	str	r2, [r3, #48]	; 0x30
}
 800352a:	bf00      	nop
 800352c:	3754      	adds	r7, #84	; 0x54
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr

08003536 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b084      	sub	sp, #16
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003542:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2200      	movs	r2, #0
 8003548:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003550:	68f8      	ldr	r0, [r7, #12]
 8003552:	f7ff fecf 	bl	80032f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003556:	bf00      	nop
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800355e:	b480      	push	{r7}
 8003560:	b085      	sub	sp, #20
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b21      	cmp	r3, #33	; 0x21
 8003570:	d13e      	bne.n	80035f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800357a:	d114      	bne.n	80035a6 <UART_Transmit_IT+0x48>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d110      	bne.n	80035a6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a1b      	ldr	r3, [r3, #32]
 8003588:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	881b      	ldrh	r3, [r3, #0]
 800358e:	461a      	mov	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003598:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a1b      	ldr	r3, [r3, #32]
 800359e:	1c9a      	adds	r2, r3, #2
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	621a      	str	r2, [r3, #32]
 80035a4:	e008      	b.n	80035b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	1c59      	adds	r1, r3, #1
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	6211      	str	r1, [r2, #32]
 80035b0:	781a      	ldrb	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035bc:	b29b      	uxth	r3, r3
 80035be:	3b01      	subs	r3, #1
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	4619      	mov	r1, r3
 80035c6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d10f      	bne.n	80035ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68da      	ldr	r2, [r3, #12]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68da      	ldr	r2, [r3, #12]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80035ec:	2300      	movs	r3, #0
 80035ee:	e000      	b.n	80035f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80035f0:	2302      	movs	r3, #2
  }
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3714      	adds	r7, #20
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr

080035fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b082      	sub	sp, #8
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68da      	ldr	r2, [r3, #12]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003614:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2220      	movs	r2, #32
 800361a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f7ff fe5e 	bl	80032e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3708      	adds	r7, #8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b08c      	sub	sp, #48	; 0x30
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b22      	cmp	r3, #34	; 0x22
 8003640:	f040 80ab 	bne.w	800379a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800364c:	d117      	bne.n	800367e <UART_Receive_IT+0x50>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d113      	bne.n	800367e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003656:	2300      	movs	r3, #0
 8003658:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	b29b      	uxth	r3, r3
 8003668:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800366c:	b29a      	uxth	r2, r3
 800366e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003670:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003676:	1c9a      	adds	r2, r3, #2
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	629a      	str	r2, [r3, #40]	; 0x28
 800367c:	e026      	b.n	80036cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003682:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003684:	2300      	movs	r3, #0
 8003686:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003690:	d007      	beq.n	80036a2 <UART_Receive_IT+0x74>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d10a      	bne.n	80036b0 <UART_Receive_IT+0x82>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d106      	bne.n	80036b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	b2da      	uxtb	r2, r3
 80036aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ac:	701a      	strb	r2, [r3, #0]
 80036ae:	e008      	b.n	80036c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036bc:	b2da      	uxtb	r2, r3
 80036be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c6:	1c5a      	adds	r2, r3, #1
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	3b01      	subs	r3, #1
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	4619      	mov	r1, r3
 80036da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d15a      	bne.n	8003796 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68da      	ldr	r2, [r3, #12]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f022 0220 	bic.w	r2, r2, #32
 80036ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68da      	ldr	r2, [r3, #12]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	695a      	ldr	r2, [r3, #20]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f022 0201 	bic.w	r2, r2, #1
 800370e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2220      	movs	r2, #32
 8003714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371c:	2b01      	cmp	r3, #1
 800371e:	d135      	bne.n	800378c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	330c      	adds	r3, #12
 800372c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	e853 3f00 	ldrex	r3, [r3]
 8003734:	613b      	str	r3, [r7, #16]
   return(result);
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	f023 0310 	bic.w	r3, r3, #16
 800373c:	627b      	str	r3, [r7, #36]	; 0x24
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	330c      	adds	r3, #12
 8003744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003746:	623a      	str	r2, [r7, #32]
 8003748:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374a:	69f9      	ldr	r1, [r7, #28]
 800374c:	6a3a      	ldr	r2, [r7, #32]
 800374e:	e841 2300 	strex	r3, r2, [r1]
 8003752:	61bb      	str	r3, [r7, #24]
   return(result);
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1e5      	bne.n	8003726 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0310 	and.w	r3, r3, #16
 8003764:	2b10      	cmp	r3, #16
 8003766:	d10a      	bne.n	800377e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003768:	2300      	movs	r3, #0
 800376a:	60fb      	str	r3, [r7, #12]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	60fb      	str	r3, [r7, #12]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	60fb      	str	r3, [r7, #12]
 800377c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003782:	4619      	mov	r1, r3
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f7ff fdbf 	bl	8003308 <HAL_UARTEx_RxEventCallback>
 800378a:	e002      	b.n	8003792 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f7fc feb5 	bl	80004fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003792:	2300      	movs	r3, #0
 8003794:	e002      	b.n	800379c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003796:	2300      	movs	r3, #0
 8003798:	e000      	b.n	800379c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800379a:	2302      	movs	r3, #2
  }
}
 800379c:	4618      	mov	r0, r3
 800379e:	3730      	adds	r7, #48	; 0x30
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037a8:	b09f      	sub	sp, #124	; 0x7c
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80037b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ba:	68d9      	ldr	r1, [r3, #12]
 80037bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	ea40 0301 	orr.w	r3, r0, r1
 80037c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037c8:	689a      	ldr	r2, [r3, #8]
 80037ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	431a      	orrs	r2, r3
 80037d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037d2:	695b      	ldr	r3, [r3, #20]
 80037d4:	431a      	orrs	r2, r3
 80037d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037d8:	69db      	ldr	r3, [r3, #28]
 80037da:	4313      	orrs	r3, r2
 80037dc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80037de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80037e8:	f021 010c 	bic.w	r1, r1, #12
 80037ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037f2:	430b      	orrs	r3, r1
 80037f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	695b      	ldr	r3, [r3, #20]
 80037fc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003800:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003802:	6999      	ldr	r1, [r3, #24]
 8003804:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	ea40 0301 	orr.w	r3, r0, r1
 800380c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800380e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	4bc5      	ldr	r3, [pc, #788]	; (8003b28 <UART_SetConfig+0x384>)
 8003814:	429a      	cmp	r2, r3
 8003816:	d004      	beq.n	8003822 <UART_SetConfig+0x7e>
 8003818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	4bc3      	ldr	r3, [pc, #780]	; (8003b2c <UART_SetConfig+0x388>)
 800381e:	429a      	cmp	r2, r3
 8003820:	d103      	bne.n	800382a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003822:	f7fe fabd 	bl	8001da0 <HAL_RCC_GetPCLK2Freq>
 8003826:	6778      	str	r0, [r7, #116]	; 0x74
 8003828:	e002      	b.n	8003830 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800382a:	f7fe faa5 	bl	8001d78 <HAL_RCC_GetPCLK1Freq>
 800382e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003830:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003832:	69db      	ldr	r3, [r3, #28]
 8003834:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003838:	f040 80b6 	bne.w	80039a8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800383c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800383e:	461c      	mov	r4, r3
 8003840:	f04f 0500 	mov.w	r5, #0
 8003844:	4622      	mov	r2, r4
 8003846:	462b      	mov	r3, r5
 8003848:	1891      	adds	r1, r2, r2
 800384a:	6439      	str	r1, [r7, #64]	; 0x40
 800384c:	415b      	adcs	r3, r3
 800384e:	647b      	str	r3, [r7, #68]	; 0x44
 8003850:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003854:	1912      	adds	r2, r2, r4
 8003856:	eb45 0303 	adc.w	r3, r5, r3
 800385a:	f04f 0000 	mov.w	r0, #0
 800385e:	f04f 0100 	mov.w	r1, #0
 8003862:	00d9      	lsls	r1, r3, #3
 8003864:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003868:	00d0      	lsls	r0, r2, #3
 800386a:	4602      	mov	r2, r0
 800386c:	460b      	mov	r3, r1
 800386e:	1911      	adds	r1, r2, r4
 8003870:	6639      	str	r1, [r7, #96]	; 0x60
 8003872:	416b      	adcs	r3, r5
 8003874:	667b      	str	r3, [r7, #100]	; 0x64
 8003876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	461a      	mov	r2, r3
 800387c:	f04f 0300 	mov.w	r3, #0
 8003880:	1891      	adds	r1, r2, r2
 8003882:	63b9      	str	r1, [r7, #56]	; 0x38
 8003884:	415b      	adcs	r3, r3
 8003886:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003888:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800388c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003890:	f7fc fcb8 	bl	8000204 <__aeabi_uldivmod>
 8003894:	4602      	mov	r2, r0
 8003896:	460b      	mov	r3, r1
 8003898:	4ba5      	ldr	r3, [pc, #660]	; (8003b30 <UART_SetConfig+0x38c>)
 800389a:	fba3 2302 	umull	r2, r3, r3, r2
 800389e:	095b      	lsrs	r3, r3, #5
 80038a0:	011e      	lsls	r6, r3, #4
 80038a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038a4:	461c      	mov	r4, r3
 80038a6:	f04f 0500 	mov.w	r5, #0
 80038aa:	4622      	mov	r2, r4
 80038ac:	462b      	mov	r3, r5
 80038ae:	1891      	adds	r1, r2, r2
 80038b0:	6339      	str	r1, [r7, #48]	; 0x30
 80038b2:	415b      	adcs	r3, r3
 80038b4:	637b      	str	r3, [r7, #52]	; 0x34
 80038b6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80038ba:	1912      	adds	r2, r2, r4
 80038bc:	eb45 0303 	adc.w	r3, r5, r3
 80038c0:	f04f 0000 	mov.w	r0, #0
 80038c4:	f04f 0100 	mov.w	r1, #0
 80038c8:	00d9      	lsls	r1, r3, #3
 80038ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80038ce:	00d0      	lsls	r0, r2, #3
 80038d0:	4602      	mov	r2, r0
 80038d2:	460b      	mov	r3, r1
 80038d4:	1911      	adds	r1, r2, r4
 80038d6:	65b9      	str	r1, [r7, #88]	; 0x58
 80038d8:	416b      	adcs	r3, r5
 80038da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	461a      	mov	r2, r3
 80038e2:	f04f 0300 	mov.w	r3, #0
 80038e6:	1891      	adds	r1, r2, r2
 80038e8:	62b9      	str	r1, [r7, #40]	; 0x28
 80038ea:	415b      	adcs	r3, r3
 80038ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80038f2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80038f6:	f7fc fc85 	bl	8000204 <__aeabi_uldivmod>
 80038fa:	4602      	mov	r2, r0
 80038fc:	460b      	mov	r3, r1
 80038fe:	4b8c      	ldr	r3, [pc, #560]	; (8003b30 <UART_SetConfig+0x38c>)
 8003900:	fba3 1302 	umull	r1, r3, r3, r2
 8003904:	095b      	lsrs	r3, r3, #5
 8003906:	2164      	movs	r1, #100	; 0x64
 8003908:	fb01 f303 	mul.w	r3, r1, r3
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	3332      	adds	r3, #50	; 0x32
 8003912:	4a87      	ldr	r2, [pc, #540]	; (8003b30 <UART_SetConfig+0x38c>)
 8003914:	fba2 2303 	umull	r2, r3, r2, r3
 8003918:	095b      	lsrs	r3, r3, #5
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003920:	441e      	add	r6, r3
 8003922:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003924:	4618      	mov	r0, r3
 8003926:	f04f 0100 	mov.w	r1, #0
 800392a:	4602      	mov	r2, r0
 800392c:	460b      	mov	r3, r1
 800392e:	1894      	adds	r4, r2, r2
 8003930:	623c      	str	r4, [r7, #32]
 8003932:	415b      	adcs	r3, r3
 8003934:	627b      	str	r3, [r7, #36]	; 0x24
 8003936:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800393a:	1812      	adds	r2, r2, r0
 800393c:	eb41 0303 	adc.w	r3, r1, r3
 8003940:	f04f 0400 	mov.w	r4, #0
 8003944:	f04f 0500 	mov.w	r5, #0
 8003948:	00dd      	lsls	r5, r3, #3
 800394a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800394e:	00d4      	lsls	r4, r2, #3
 8003950:	4622      	mov	r2, r4
 8003952:	462b      	mov	r3, r5
 8003954:	1814      	adds	r4, r2, r0
 8003956:	653c      	str	r4, [r7, #80]	; 0x50
 8003958:	414b      	adcs	r3, r1
 800395a:	657b      	str	r3, [r7, #84]	; 0x54
 800395c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	461a      	mov	r2, r3
 8003962:	f04f 0300 	mov.w	r3, #0
 8003966:	1891      	adds	r1, r2, r2
 8003968:	61b9      	str	r1, [r7, #24]
 800396a:	415b      	adcs	r3, r3
 800396c:	61fb      	str	r3, [r7, #28]
 800396e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003972:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003976:	f7fc fc45 	bl	8000204 <__aeabi_uldivmod>
 800397a:	4602      	mov	r2, r0
 800397c:	460b      	mov	r3, r1
 800397e:	4b6c      	ldr	r3, [pc, #432]	; (8003b30 <UART_SetConfig+0x38c>)
 8003980:	fba3 1302 	umull	r1, r3, r3, r2
 8003984:	095b      	lsrs	r3, r3, #5
 8003986:	2164      	movs	r1, #100	; 0x64
 8003988:	fb01 f303 	mul.w	r3, r1, r3
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	00db      	lsls	r3, r3, #3
 8003990:	3332      	adds	r3, #50	; 0x32
 8003992:	4a67      	ldr	r2, [pc, #412]	; (8003b30 <UART_SetConfig+0x38c>)
 8003994:	fba2 2303 	umull	r2, r3, r2, r3
 8003998:	095b      	lsrs	r3, r3, #5
 800399a:	f003 0207 	and.w	r2, r3, #7
 800399e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4432      	add	r2, r6
 80039a4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80039a6:	e0b9      	b.n	8003b1c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039aa:	461c      	mov	r4, r3
 80039ac:	f04f 0500 	mov.w	r5, #0
 80039b0:	4622      	mov	r2, r4
 80039b2:	462b      	mov	r3, r5
 80039b4:	1891      	adds	r1, r2, r2
 80039b6:	6139      	str	r1, [r7, #16]
 80039b8:	415b      	adcs	r3, r3
 80039ba:	617b      	str	r3, [r7, #20]
 80039bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80039c0:	1912      	adds	r2, r2, r4
 80039c2:	eb45 0303 	adc.w	r3, r5, r3
 80039c6:	f04f 0000 	mov.w	r0, #0
 80039ca:	f04f 0100 	mov.w	r1, #0
 80039ce:	00d9      	lsls	r1, r3, #3
 80039d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80039d4:	00d0      	lsls	r0, r2, #3
 80039d6:	4602      	mov	r2, r0
 80039d8:	460b      	mov	r3, r1
 80039da:	eb12 0804 	adds.w	r8, r2, r4
 80039de:	eb43 0905 	adc.w	r9, r3, r5
 80039e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f04f 0100 	mov.w	r1, #0
 80039ec:	f04f 0200 	mov.w	r2, #0
 80039f0:	f04f 0300 	mov.w	r3, #0
 80039f4:	008b      	lsls	r3, r1, #2
 80039f6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80039fa:	0082      	lsls	r2, r0, #2
 80039fc:	4640      	mov	r0, r8
 80039fe:	4649      	mov	r1, r9
 8003a00:	f7fc fc00 	bl	8000204 <__aeabi_uldivmod>
 8003a04:	4602      	mov	r2, r0
 8003a06:	460b      	mov	r3, r1
 8003a08:	4b49      	ldr	r3, [pc, #292]	; (8003b30 <UART_SetConfig+0x38c>)
 8003a0a:	fba3 2302 	umull	r2, r3, r3, r2
 8003a0e:	095b      	lsrs	r3, r3, #5
 8003a10:	011e      	lsls	r6, r3, #4
 8003a12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a14:	4618      	mov	r0, r3
 8003a16:	f04f 0100 	mov.w	r1, #0
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	1894      	adds	r4, r2, r2
 8003a20:	60bc      	str	r4, [r7, #8]
 8003a22:	415b      	adcs	r3, r3
 8003a24:	60fb      	str	r3, [r7, #12]
 8003a26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a2a:	1812      	adds	r2, r2, r0
 8003a2c:	eb41 0303 	adc.w	r3, r1, r3
 8003a30:	f04f 0400 	mov.w	r4, #0
 8003a34:	f04f 0500 	mov.w	r5, #0
 8003a38:	00dd      	lsls	r5, r3, #3
 8003a3a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003a3e:	00d4      	lsls	r4, r2, #3
 8003a40:	4622      	mov	r2, r4
 8003a42:	462b      	mov	r3, r5
 8003a44:	1814      	adds	r4, r2, r0
 8003a46:	64bc      	str	r4, [r7, #72]	; 0x48
 8003a48:	414b      	adcs	r3, r1
 8003a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f04f 0100 	mov.w	r1, #0
 8003a56:	f04f 0200 	mov.w	r2, #0
 8003a5a:	f04f 0300 	mov.w	r3, #0
 8003a5e:	008b      	lsls	r3, r1, #2
 8003a60:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003a64:	0082      	lsls	r2, r0, #2
 8003a66:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003a6a:	f7fc fbcb 	bl	8000204 <__aeabi_uldivmod>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	460b      	mov	r3, r1
 8003a72:	4b2f      	ldr	r3, [pc, #188]	; (8003b30 <UART_SetConfig+0x38c>)
 8003a74:	fba3 1302 	umull	r1, r3, r3, r2
 8003a78:	095b      	lsrs	r3, r3, #5
 8003a7a:	2164      	movs	r1, #100	; 0x64
 8003a7c:	fb01 f303 	mul.w	r3, r1, r3
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	011b      	lsls	r3, r3, #4
 8003a84:	3332      	adds	r3, #50	; 0x32
 8003a86:	4a2a      	ldr	r2, [pc, #168]	; (8003b30 <UART_SetConfig+0x38c>)
 8003a88:	fba2 2303 	umull	r2, r3, r2, r3
 8003a8c:	095b      	lsrs	r3, r3, #5
 8003a8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a92:	441e      	add	r6, r3
 8003a94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a96:	4618      	mov	r0, r3
 8003a98:	f04f 0100 	mov.w	r1, #0
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	1894      	adds	r4, r2, r2
 8003aa2:	603c      	str	r4, [r7, #0]
 8003aa4:	415b      	adcs	r3, r3
 8003aa6:	607b      	str	r3, [r7, #4]
 8003aa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003aac:	1812      	adds	r2, r2, r0
 8003aae:	eb41 0303 	adc.w	r3, r1, r3
 8003ab2:	f04f 0400 	mov.w	r4, #0
 8003ab6:	f04f 0500 	mov.w	r5, #0
 8003aba:	00dd      	lsls	r5, r3, #3
 8003abc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003ac0:	00d4      	lsls	r4, r2, #3
 8003ac2:	4622      	mov	r2, r4
 8003ac4:	462b      	mov	r3, r5
 8003ac6:	eb12 0a00 	adds.w	sl, r2, r0
 8003aca:	eb43 0b01 	adc.w	fp, r3, r1
 8003ace:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f04f 0100 	mov.w	r1, #0
 8003ad8:	f04f 0200 	mov.w	r2, #0
 8003adc:	f04f 0300 	mov.w	r3, #0
 8003ae0:	008b      	lsls	r3, r1, #2
 8003ae2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003ae6:	0082      	lsls	r2, r0, #2
 8003ae8:	4650      	mov	r0, sl
 8003aea:	4659      	mov	r1, fp
 8003aec:	f7fc fb8a 	bl	8000204 <__aeabi_uldivmod>
 8003af0:	4602      	mov	r2, r0
 8003af2:	460b      	mov	r3, r1
 8003af4:	4b0e      	ldr	r3, [pc, #56]	; (8003b30 <UART_SetConfig+0x38c>)
 8003af6:	fba3 1302 	umull	r1, r3, r3, r2
 8003afa:	095b      	lsrs	r3, r3, #5
 8003afc:	2164      	movs	r1, #100	; 0x64
 8003afe:	fb01 f303 	mul.w	r3, r1, r3
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	011b      	lsls	r3, r3, #4
 8003b06:	3332      	adds	r3, #50	; 0x32
 8003b08:	4a09      	ldr	r2, [pc, #36]	; (8003b30 <UART_SetConfig+0x38c>)
 8003b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b0e:	095b      	lsrs	r3, r3, #5
 8003b10:	f003 020f 	and.w	r2, r3, #15
 8003b14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4432      	add	r2, r6
 8003b1a:	609a      	str	r2, [r3, #8]
}
 8003b1c:	bf00      	nop
 8003b1e:	377c      	adds	r7, #124	; 0x7c
 8003b20:	46bd      	mov	sp, r7
 8003b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b26:	bf00      	nop
 8003b28:	40011000 	.word	0x40011000
 8003b2c:	40011400 	.word	0x40011400
 8003b30:	51eb851f 	.word	0x51eb851f

08003b34 <__libc_init_array>:
 8003b34:	b570      	push	{r4, r5, r6, lr}
 8003b36:	4d0d      	ldr	r5, [pc, #52]	; (8003b6c <__libc_init_array+0x38>)
 8003b38:	4c0d      	ldr	r4, [pc, #52]	; (8003b70 <__libc_init_array+0x3c>)
 8003b3a:	1b64      	subs	r4, r4, r5
 8003b3c:	10a4      	asrs	r4, r4, #2
 8003b3e:	2600      	movs	r6, #0
 8003b40:	42a6      	cmp	r6, r4
 8003b42:	d109      	bne.n	8003b58 <__libc_init_array+0x24>
 8003b44:	4d0b      	ldr	r5, [pc, #44]	; (8003b74 <__libc_init_array+0x40>)
 8003b46:	4c0c      	ldr	r4, [pc, #48]	; (8003b78 <__libc_init_array+0x44>)
 8003b48:	f000 f82e 	bl	8003ba8 <_init>
 8003b4c:	1b64      	subs	r4, r4, r5
 8003b4e:	10a4      	asrs	r4, r4, #2
 8003b50:	2600      	movs	r6, #0
 8003b52:	42a6      	cmp	r6, r4
 8003b54:	d105      	bne.n	8003b62 <__libc_init_array+0x2e>
 8003b56:	bd70      	pop	{r4, r5, r6, pc}
 8003b58:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b5c:	4798      	blx	r3
 8003b5e:	3601      	adds	r6, #1
 8003b60:	e7ee      	b.n	8003b40 <__libc_init_array+0xc>
 8003b62:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b66:	4798      	blx	r3
 8003b68:	3601      	adds	r6, #1
 8003b6a:	e7f2      	b.n	8003b52 <__libc_init_array+0x1e>
 8003b6c:	08003be0 	.word	0x08003be0
 8003b70:	08003be0 	.word	0x08003be0
 8003b74:	08003be0 	.word	0x08003be0
 8003b78:	08003be4 	.word	0x08003be4

08003b7c <memcpy>:
 8003b7c:	440a      	add	r2, r1
 8003b7e:	4291      	cmp	r1, r2
 8003b80:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b84:	d100      	bne.n	8003b88 <memcpy+0xc>
 8003b86:	4770      	bx	lr
 8003b88:	b510      	push	{r4, lr}
 8003b8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b92:	4291      	cmp	r1, r2
 8003b94:	d1f9      	bne.n	8003b8a <memcpy+0xe>
 8003b96:	bd10      	pop	{r4, pc}

08003b98 <memset>:
 8003b98:	4402      	add	r2, r0
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d100      	bne.n	8003ba2 <memset+0xa>
 8003ba0:	4770      	bx	lr
 8003ba2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ba6:	e7f9      	b.n	8003b9c <memset+0x4>

08003ba8 <_init>:
 8003ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003baa:	bf00      	nop
 8003bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bae:	bc08      	pop	{r3}
 8003bb0:	469e      	mov	lr, r3
 8003bb2:	4770      	bx	lr

08003bb4 <_fini>:
 8003bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bb6:	bf00      	nop
 8003bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bba:	bc08      	pop	{r3}
 8003bbc:	469e      	mov	lr, r3
 8003bbe:	4770      	bx	lr
